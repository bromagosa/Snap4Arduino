<blocks app="Snap4Arduino 1.2.6
, http://snap4arduino.rocks" version="1"><block-definition s="$robot Tone pin %&apos;pin&apos; | %&apos;freq&apos; Hz %&apos;dur&apos; ms" type="command" category="arduino"><comment x="0" y="0" w="619.0000000000001" collapsed="false">Play sound of selected frequenzy (Hz) during a time (miliseconds value) using a buzzer on the selected pin.&#xD;&#xD;-Frequency. Accept values from 0 to 65535 Hz, but real operation range is 32-16000Hz.&#xD;-Duration. Accept values up to 60000ms.&#xD;-Default pin is 14 (A0), ready to Imagina shield.</comment><header></header><code></code><translations></translations><inputs><input type="%n">14</input><input type="%n">0</input><input type="%n">0</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>freq</l><l>dur</l></list><l>if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[5].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_tone or SA5Firmata_ir firmware");&#xD;}&#xD;&#xD;var board = this.arduino.board;&#xD;if (pin === undefined || freq === undefined || pin &lt;= 1 || pin &gt; 255 || freq &lt; 0 || freq &gt; 65535) {&#xD;  throw new Error("Required var pin (2-255) and frequency (0-65535)");&#xD;}&#xD;var dur = dur || 0;&#xD;dur = dur &amp; 0xFFFF; //clamping value to 32 bits&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0xC7,  //Tone Command&#xD;      		(dur &gt;&gt; 25) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 18) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 11) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 4) &amp; 0x7F,&#xD;      		((dur &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((freq &gt;&gt; 13) &amp; parseInt("0111",2)),&#xD;      		(freq &gt;&gt; 6) &amp; 0x7F,&#xD;      		((freq &lt;&lt; 1) &amp; parseInt("01111110",2)) | ((pin &gt;&gt; 7) &amp; parseInt("01",2)),&#xD;        pin &amp; 0x7F,&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="pin"/><block var="freq"/><block var="dur"/></list></block></script></block-definition><block-definition s="$robot pulseOut pin %&apos;pin&apos; | %&apos;stValue&apos; %&apos;time1&apos; %&apos;time2&apos; %&apos;time3&apos; µs" type="command" category="arduino"><comment x="0" y="0" w="573" collapsed="false">Sends a pulse (high or low) to the selected pin.&#xD;&#xD;- Times (in microseconds) for the pulse: initialStateTime, pulseTime, endingStateTime&#xD;- Times are 11 bits values: (0-2047 microseconds)</comment><header></header><code></code><translations></translations><inputs><input type="%n"></input><input type="%txt" readonly="true">HIGH<options>HIGH
LOW</options></input><input type="%n"></input><input type="%n"></input><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>stValue</l><l>time1</l><l>time2</l><l>time3</l></list><l>if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[5].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_tone or SA5Firmata_ir firmware");&#xD;}&#xD;&#xD;var board = this.arduino.board,&#xD;    value = 1;&#xD;if (stValue == "LOW") {value = 0;} //only explicit LOW causes a low pulse &#xD;if (pin === undefined || pin &lt;= 1 || pin &gt; 255) {&#xD;    throw new Error("Required var pin (2-255)");&#xD;}&#xD;//undefined time will be 0 seconds&#xD;var time1 = time1 || 0,&#xD;    time2 = time2 || 0,&#xD;    time3 = time3 || 0;&#xD;//clamping time values to 11 bits&#xD;time1 = time1 &amp; parseInt("011111111111",2);&#xD;time2 = time2 &amp; parseInt("011111111111",2);&#xD;time3 = time3 &amp; parseInt("011111111111",2);&#xD;var data = [0xF0, //START_SYSEX&#xD;        		0xC9,  //microsecondsPulseOut Command&#xD;        		(time1 &gt;&gt; 4) &amp; 0x7F,&#xD;        		((time1 &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((time2 &gt;&gt; 8) &amp; parseInt("0111",2)),&#xD;        		(time2 &gt;&gt; 1) &amp; 0x7F,&#xD;        		((time2 &lt;&lt; 6) &amp; parseInt("01000000",2)) | ((time3 &gt;&gt; 5) &amp; parseInt("0111111",2)),&#xD;      	  	((time3 &lt;&lt; 2) &amp; parseInt("01111100",2)) | ((value &lt;&lt; 1) &amp; parseInt("010",2)) | ((pin &gt;&gt; 7) &amp; parseInt("01",2)),&#xD;      	  	(pin &amp; 0x7F), &#xD;      	  	0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="pin"/><block var="stValue"/><block var="time1"/><block var="time2"/><block var="time3"/></list></block></script></block-definition><block-definition s="$robot pulseIn (µs) pin %&apos;pin&apos; | %&apos;stValue&apos; timeout: %&apos;timeout&apos; µs" type="reporter" category="arduino"><comment x="0" y="0" w="777.9999999999999" collapsed="false">Return a pulse (either HIGH or LOW) on a pin in microseconds.&#xD;&#xD;Default timeout is 1 second (1000000 µs)</comment><header></header><code></code><translations></translations><inputs><input type="%n"></input><input type="%txt" readonly="true">HIGH<options>HIGH
LOW</options></input><input type="%n"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>stValue</l><l>timeout</l></list><l>var board = this.arduino.board,&#xD;    value =1;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[5].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_tone or SA5Firmata_ir firmware");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0xC8] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0xC8] = function(board) {&#xD;        var pulse = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 25| (board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 18 | (board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 11 | (board.currentBuffer[5] &amp; 0x7F) &lt;&lt; 4 | (board.currentBuffer[6] &amp; 0x7F) &gt;&gt; 3;&#xD;        var pinResp = (board.currentBuffer[6] &amp; parseInt("0111",2)) &lt;&lt; 5 | (board.currentBuffer[7] &amp; parseInt("011111",2));&#xD;        board.emit("pulseIn-"+pinResp, pulse);&#xD;    };&#xD;}&#xD;board["pulseIn-"+pin] = null;&#xD;if (stValue == "LOW") {value = 0;} //only explicit LOW return a low pulse &#xD;if (pin === undefined || pin &lt;= 1 || pin &gt; 255) {&#xD;    throw new Error("Required var pin (2-255)");&#xD;}&#xD;var timeout = timeout || 0; //undefined will be 0, and 0 causes Arduino&apos;s default (1s)&#xD;timeout = timeout &amp; 0xFFFFFFFF; //clamping value to 32 bits&#xD;board.once("pulseIn-"+pin, function(data){board["pulseIn-"+pin] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;        		0xC8,  //PulseIn Command&#xD;        		(timeout &gt;&gt; 25) &amp; 0x7F,&#xD;        		(timeout &gt;&gt; 18) &amp; 0x7F,&#xD;        		(timeout &gt;&gt; 11) &amp; 0x7F,&#xD;      	  	(timeout &gt;&gt; 4) &amp; 0x7F,&#xD;      		  ((timeout &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((value &lt;&lt; 2) &amp; parseInt("0100",2)) | ((pin &gt;&gt; 6) &amp; parseInt("011",2)),&#xD;      		  (pin &amp; parseInt("0111111",2)),&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data)) ;</l></block><list><block var="pin"/><block var="stValue"/><block var="timeout"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("pulseIn-"+pin);&#xD;return (board["pulseIn-"+pin] != null);</l></block><list><block var="pin"/></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("pulseIn-"+pin);&#xD;return board["pulseIn-"+pin];</l></block><list><block var="pin"/></list></block></block></script></block-definition><block-definition s="$robot ping (cm) Trig %&apos;pinSen&apos; Echo %&apos;pinRec&apos; pulse %&apos;time1&apos; %&apos;time2&apos; µs" type="reporter" category="arduino"><comment x="0" y="0" w="658" collapsed="false">Return distance (in cm) from a Ultrasonic sensor.&#xD;&#xD;-Tested range from 3 up to 400 cm. Timeouts return 1000.&#xD;-You must select the connection pins (trigger and echo).&#xD;-You can modify trigger pulse. By default it sends a 5 µs pulse after 2µs in low state.&#xD;-Distance calculation assumes the speed of sound is 343m/s (value in dry air at 20ºC)</comment><header></header><code></code><translations></translations><inputs><input type="%n">4</input><input type="%n">2</input><input type="%n">2</input><input type="%n">5</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pinRec</l><l>pinSen</l><l>time1</l><l>time2</l></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[5].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_tone or SA5Firmata_ir firmware");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0xCA] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0xCA] = function(board) {&#xD;        var pulse = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 9| (board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 2 | (board.currentBuffer[4] &amp; parseInt("01100000",2)) &gt;&gt; 5;&#xD;        var pinResponse = (board.currentBuffer[4] &amp; parseInt("011111",2)) &lt;&lt; 3 | (board.currentBuffer[5] &amp; parseInt("0111",2));&#xD;        board.emit("ping-"+pinResponse, pulse);&#xD;    };&#xD;}&#xD;board["ping-"+pinRec] = null;&#xD;if (pinSen === undefined || pinSen &lt;= 1 || pinSen &gt; 255 || pinRec === undefined || pinRec &lt;= 1 || pinRec &gt; 255) {&#xD;    throw new Error("Required vars pinSen and pinRec (2-255)");&#xD;}&#xD;board.once("ping-"+pinRec, function(data){board["ping-"+pinRec] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;        		0xCA,  //Ping Command&#xD;        		(pinSen &gt;&gt; 1) &amp; 0x7F,&#xD;        		(pinSen &lt;&lt; 6) | (time1 &amp; parseInt("011111",2)),&#xD;        		(pinRec &gt;&gt; 1) &amp; 0x7F,&#xD;      		  (pinRec &lt;&lt; 6) | (time2 &amp; parseInt("011111",2)),&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="pinRec"/><block var="pinSen"/><block var="time1"/><block var="time2"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>pinRec</l></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("ping-"+pinRec);&#xD;return (board["ping-"+pinRec] != null);</l></block><list><block var="pinRec"/></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pinRec</l></list><l>var board = this.arduino.board,&#xD;    value = Math.round(board["ping-"+pinRec]/29.15/2);&#xD;board.getArduinoBoardParam("ping-"+pinRec);&#xD;if (value == 0) return 1000;&#xD;return value;</l></block><list><block var="pinRec"/></list></block></block></script></block-definition><block-definition s="$robot Nunchuk %&apos;opt&apos;" type="reporter" category="arduino"><comment x="0" y="0" w="472" collapsed="false">Return sensor values from a Nunchuk connected to I2C pins.&#xD;&#xD;-Sensors: Joystick (joyX and joyY), buttons ( butC and butZ) and accelerometers (accX, accY and accZ)&#xD;-Nunchuk I2C connection uses SCL, SDA, Ground and Vcc</comment><header></header><code></code><translations></translations><inputs><input type="%txt" readonly="true">joyX<options>joyX
joyY
butZ
butC
accX
accY
accZ</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>command</l></list><l>var board = this.arduino.board,&#xD;    cCode = 0xC0;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[5].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_tone or SA5Firmata_ir firmware");&#xD;}&#xD;// default command is joyX with value 0xC0&#xD;if (command == "joyY") cCode = 0xC1;&#xD;if (command == "butZ") cCode = 0xC2;&#xD;if (command == "butC") cCode = 0xC3;&#xD;if (command == "accX") cCode = 0xC4;&#xD;if (command == "accY") cCode = 0xC5;&#xD;if (command == "accZ") cCode = 0xC6;&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[cCode] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[cCode] = function(board) {&#xD;        if (command == "butZ" || command == "butC") {&#xD;            var value = (board.currentBuffer[2] &amp; 0x7F);&#xD;        } else {&#xD;            var value = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;        }&#xD; 	      board.emit(command, value);&#xD;    };&#xD;}&#xD;board[command] = null;&#xD;board.once(command, function(data){board[command] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;				cCode,//nunchuk command&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="opt"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>command</l></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam(command);&#xD;return (board[command] != null);</l></block><list><block var="opt"/></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>command</l></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam(command);&#xD;return board[command];</l></block><list><block var="opt"/></list></block></block></script></block-definition><block-definition s="$robot DHT11 %&apos;param&apos; on pin %&apos;pin&apos;" type="reporter" category="arduino"><comment x="0" y="0" w="381" collapsed="false">Return humidity/temperature (ºC) from DHT11 sensor connected on selected pin.</comment><header></header><code></code><translations></translations><inputs><input type="%txt" readonly="true">humidity<options>humidity
temperature</options></input><input type="%n">4</input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>param</l></list><l>var board = this.arduino.board,&#xD;    sparam = 0;&#xD;if (param == "temperature") sparam = 1;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[5].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_tone or SA5Firmata_ir firmware");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0xCF] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0xCF] = function(board) {&#xD;      	 var response = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 1 | (board.currentBuffer[3] &amp; 0x01);&#xD;       	var rpin = board.currentBuffer[4] &gt;&gt; 1;&#xD;      	 var rparam = board.currentBuffer[4] &amp; parseInt("01",2);&#xD;      	 board.emit("DHT11-"+rpin+"-"+rparam, response);&#xD;    };&#xD;}&#xD;board["DHT11-"+pin+"-"+sparam] = null;&#xD;if (pin === undefined || pin &lt;= 1 || pin &gt; 63) {&#xD;  throw new Error("Required var pin (2-63)");&#xD;}&#xD;board.once("DHT11-"+pin+"-"+sparam, function(data){board["DHT11-"+pin+"-"+sparam] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0xCF,  //DHT11 Command&#xD;      		((pin &lt;&lt; 1) |  sparam) &amp; 0x7F,&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="pin"/><block var="param"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l><l>param</l></list><l>var board = this.arduino.board,&#xD;    sparam = 0;&#xD;if (param == "temperature") sparam = 1;&#xD;board.checkArduinoBoardParam("DHT11-"+pin+"-"+sparam);&#xD;return (board["DHT11-"+pin+"-"+sparam] != null);</l></block><list><block var="pin"/><block var="param"/></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l><l>param</l></list><l>var board = this.arduino.board,&#xD;    sparam = 0;&#xD;if (param == "temperature") sparam = 1;&#xD;board.getArduinoBoardParam("DHT11-"+pin+"-"+sparam);&#xD;if (board["DHT11-"+pin+"-"+sparam] == 255) {&#xD;    return;&#xD;} else {&#xD;return board["DHT11-"+pin+"-"+sparam];&#xD;}</l></block><list><block var="pin"/><block var="param"/></list></block></block></script></block-definition><block-definition s="$robot IR %&apos;MESSAGE&apos; send by %&apos;CODER&apos;" type="command" category="arduino"><comment x="0" y="0" w="525" collapsed="false">Send IR signal (hexadecimal code) by IR emitter diode on pin 3, using Sony or RC5 protocol.&#xD;&#xD;You can send values from 0 to FFFFFF (6 hexadecimal digits).</comment><header></header><code></code><translations></translations><inputs><input type="%txt">FFFFFF</input><input type="%txt" readonly="true">Sony<options>Sony
RC5</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>message</l><l>coder</l></list><l>if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[6].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_ir firmware");&#xD;}&#xD;&#xD;var board = this.arduino.board;  //Definition should change according to the context&#xD;if (message === undefined || coder === undefined) {&#xD;  throw new Error("Message and coder are required");&#xD;}&#xD;var smessage = parseInt(message,16);&#xD;smessage = smessage &amp; parseInt("FFFFFF",16);&#xD;if (coder == "RC5") {&#xD;  scoder = 1;&#xD;} else {&#xD;  scoder = 0;&#xD;}&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0xCE,  //Send IR&#xD;      		(smessage &gt;&gt; 17) &amp; 0x7F,&#xD;      		(smessage &gt;&gt; 10) &amp; 0x7F,&#xD;      		(smessage &gt;&gt; 3) &amp; 0x7F,&#xD;      		((smessage &lt;&lt; 4) &amp; parseInt("01110000",2)) | (scoder &amp; parseInt("01111",2)),&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="MESSAGE"/><block var="CODER"/></list></block></script></block-definition><block-definition s="$robot %&apos;ACTIVA&apos; IR rec" type="command" category="arduino"><comment x="0" y="0" w="460" collapsed="false">You can Enable/Disable IR receiver function.&#xD;&#xD;-Default state is disabled.&#xD;-Enabling action allows IR rec function and disables PWM function on pins 3 and 11.&#xD;-Disabling action turns on PWM function again on pins 3 and 11.</comment><header></header><code></code><translations></translations><inputs><input type="%txt" readonly="true">Enable<options>Enable
Disable</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>ac</l></list><l>if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[6].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_ir firmware");&#xD;}&#xD;&#xD;var board = this.arduino.board;&#xD;if (ac == "Enable") {&#xD;  dat = 0xCC;&#xD;} else {&#xD;  dat = 0xCD;&#xD;}&#xD;var data =[0xF0,//START_SYSEX&#xD;				dat,//IR act/desact command&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="ACTIVA"/></list></block></script></block-definition><block-definition s="$robot IR rec" type="reporter" category="arduino"><comment w="462" collapsed="false">Return IR code (hexadecimal) from IR receiver connected to pin 11.&#xD;&#xD;-You must &quot;Enable IR rec&quot; before. This action disables PWM function on pins 3 and 11.&#xD;-After using this receiver you can &quot;Disable IR rec&quot; to turn on PWM function on pins 3 and 11 again.</comment><header></header><code></code><translations></translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board,&#xD;    value =1;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[6].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_ir firmware");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0xCB] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0xCB] = function(board) {&#xD;        var irResult = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 25| (board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 18 | (board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 11 | (board.currentBuffer[5] &amp; 0x7F) &lt;&lt; 4 | (board.currentBuffer[6] &amp; 0x7F) &gt;&gt; 3;&#xD;        irResult = irResult &amp; 0xFFFFFF;&#xD;        board.emit("IRrec", irResult);&#xD;    };&#xD;}&#xD;board["IRrec"] = null;&#xD;board.once("IRrec", function(data){board["IRrec"] = data;});&#xD;var data =[0xF0,//START_SYSEX&#xD;				0xCB,//IR recv command&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("IRrec");&#xD;return (board["IRrec"] != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("IRrec")&#xD;return board["IRrec"].toString(16);</l></block><list></list></block></block></script></block-definition></blocks>