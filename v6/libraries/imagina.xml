<blocks app="Snap4Arduino 6.1.2.-1
, http://snap4arduino.rocks" version="1"><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl set LED %&apos;color&apos; to %&apos;state&apos;" type="command" category="arduino"><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ posa el LED _ a _&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ fijar el LED _ a _&#xD;</translations><inputs><input type="%txt" readonly="true">🔴<options>🔴&#xD;📒&#xD;📗</options></input><input type="%b"></input></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="doDeclareVariables"><list><l>pin</l></list></block><block s="doSetVar"><l>pin</l><l>0</l></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>🔴</l></block><script><block s="doSetVar"><l>pin</l><l>6</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>📒</l></block><script><block s="doSetVar"><l>pin</l><l>5</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>📗</l></block><script><block s="doSetVar"><l>pin</l><l>3</l></block></script></block><block s="doIf"><block s="reportGreaterThan"><block var="pin"/><l>0</l></block><script><block s="digitalWrite"><block var="pin"/><block var="state"/></block></script></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl play %&apos;freq&apos; Hz for %&apos;time&apos; seconds" type="command" category="arduino"><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ toca _ Hz durant _ segons&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ toca _ Hz durante _ segundos&#xD;</translations><inputs><input type="%n">440</input><input type="%n">0.5</input></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>freq</l><l>dur</l></list><l>if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[5].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_tone or SA5Firmata_ir firmware");&#xD;}&#xD;&#xD;var board = this.arduino.board;&#xD;if (pin === undefined || freq === undefined || pin &lt;= 1 || pin &gt; 255 || freq &lt; 0 || freq &gt; 65535) {&#xD;  throw new Error("Required var pin (2-255) and frequency (0-65535)");&#xD;}&#xD;var dur = dur || 0;&#xD;dur = dur &amp; 0xFFFF; //clamping value to 32 bits&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0xC7,  //Tone Command&#xD;      		(dur &gt;&gt; 25) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 18) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 11) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 4) &amp; 0x7F,&#xD;      		((dur &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((freq &gt;&gt; 13) &amp; parseInt("0111",2)),&#xD;      		(freq &gt;&gt; 6) &amp; 0x7F,&#xD;      		((freq &lt;&lt; 1) &amp; parseInt("01111110",2)) | ((pin &gt;&gt; 7) &amp; parseInt("01",2)),&#xD;        pin &amp; 0x7F,&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><l>14</l><block var="freq"/><block s="reportProduct"><block var="time"/><l>1000</l></block></list></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl button D2 ?" type="predicate" category="arduino"><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ botó D2 ?&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ botón D2 ?&#xD;</translations><inputs></inputs><script><block s="doIfElse"><block s="reportConnected"></block><script><block s="doReport"><block s="reportDigitalReading"><l>2</l></block></block></script><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl temperature (ºC)" type="reporter" category="arduino"><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ temperatura (ºC)&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ temperatura (ºC)&#xD;</translations><inputs></inputs><script><block s="doIfElse"><block s="reportConnected"></block><script><block s="doReport"><block s="reportRound"><block s="reportQuotient"><block s="reportAnalogReading"><l>3</l></block><l>16</l></block></block></block></script><script><block s="doReport"><l>0</l></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl light" type="reporter" category="arduino"><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ llum&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ luz&#xD;</translations><inputs></inputs><script><block s="doIfElse"><block s="reportConnected"></block><script><block s="doReport"><block s="reportRound"><block s="reportQuotient"><block s="reportAnalogReading"><l>2</l></block><l>10.23</l></block></block></block></script><script><block s="doReport"><l>0</l></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl distance $D2D4-0.6 (cm)" type="reporter" category="arduino"><comment x="0" y="0" w="658" collapsed="false">Return distance (in cm) from a Ultrasonic sensor.&#xD;&#xD;-Tested range from 3 up to 400 cm. Timeouts return 1000.&#xD;-You must select the connection pins (trigger and echo).&#xD;-You can modify trigger pulse. By default it sends a 5 µs pulse after 2µs in low state.&#xD;-Distance calculation assumes the speed of sound is 343m/s (value in dry air at 20ºC)</comment><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ distància $D2D4-0.6 (cm)&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ distancia $D2D4-0.6 (cm)&#xD;</translations><inputs></inputs><script><block s="doIfElse"><block s="reportConnected"></block><script><block s="doRun"><block s="reportJSFunction"><list><l>pinRec</l><l>pinSen</l><l>time1</l><l>time2</l></list><l>var board = this.arduino.board;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[5].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_tone or SA5Firmata_ir firmware");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0xCA] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0xCA] = function(board) {&#xD;        var pulse = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 9| (board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 2 | (board.currentBuffer[4] &amp; parseInt("01100000",2)) &gt;&gt; 5;&#xD;        var pinResponse = (board.currentBuffer[4] &amp; parseInt("011111",2)) &lt;&lt; 3 | (board.currentBuffer[5] &amp; parseInt("0111",2));&#xD;        board.emit("ping-"+pinResponse, pulse);&#xD;    };&#xD;}&#xD;board["ping-"+pinRec] = null;&#xD;if (pinSen === undefined || pinSen &lt;= 1 || pinSen &gt; 255 || pinRec === undefined || pinRec &lt;= 1 || pinRec &gt; 255) {&#xD;    throw new Error("Required vars pinSen and pinRec (2-255)");&#xD;}&#xD;board.once("ping-"+pinRec, function(data){board["ping-"+pinRec] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;        		0xCA,  //Ping Command&#xD;        		(pinSen &gt;&gt; 1) &amp; 0x7F,&#xD;        		(pinSen &lt;&lt; 6) | (time1 &amp; parseInt("011111",2)),&#xD;        		(pinRec &gt;&gt; 1) &amp; 0x7F,&#xD;      		  (pinRec &lt;&lt; 6) | (time2 &amp; parseInt("011111",2)),&#xD;      		  0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><l>2</l><l>4</l><l>2</l><l>5</l></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>pinRec</l></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("ping-"+pinRec);&#xD;return (board["ping-"+pinRec] != null);</l></block><list><l>2</l></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pinRec</l></list><l>var board = this.arduino.board,&#xD;    value = Math.round(board["ping-"+pinRec]/29.15/2);&#xD;board.getArduinoBoardParam("ping-"+pinRec);&#xD;if (value == 0) return 1000;&#xD;return value;</l></block><list><l>2</l></list></block></block></script><script><block s="doReport"><l>0</l></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl Nunchuk %&apos;opt&apos;" type="reporter" category="arduino"><comment x="0" y="0" w="472.00000000000006" collapsed="false">Return sensor values from a Nunchuk connected to I2C pins.&#xD;&#xD;-Sensors: Joystick (joyX and joyY), buttons ( butC and butZ) and accelerometers (accX, accY and accZ)&#xD;-Nunchuk I2C connection uses SCL, SDA, Ground and Vcc</comment><header></header><code></code><translations></translations><inputs><input type="%txt" readonly="true">joyX<options>joyX&#xD;joyY&#xD;butZ&#xD;butC&#xD;accX&#xD;accY&#xD;accZ</options></input></inputs><script><block s="doIfElse"><block s="reportConnected"></block><script><block s="doRun"><block s="reportJSFunction"><list><l>command</l></list><l>var board = this.arduino.board,&#xD;    cCode = 0xC0;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[5].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_tone or SA5Firmata_ir firmware");&#xD;}&#xD;// default command is joyX with value 0xC0&#xD;if (command == "joyY") cCode = 0xC1;&#xD;if (command == "butZ") cCode = 0xC2;&#xD;if (command == "butC") cCode = 0xC3;&#xD;if (command == "accX") cCode = 0xC4;&#xD;if (command == "accY") cCode = 0xC5;&#xD;if (command == "accZ") cCode = 0xC6;&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[cCode] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[cCode] = function(board) {&#xD;        if (command == "butZ" || command == "butC") {&#xD;            var value = (board.currentBuffer[2] &amp; 0x7F);&#xD;        } else {&#xD;            var value = (board.currentBuffer[2] &amp; 0x7F) | ((board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 7);&#xD;        }&#xD; 	      board.emit(command, value);&#xD;    };&#xD;}&#xD;board[command] = null;&#xD;board.once(command, function(data){board[command] = data;});&#xD;var sdata =[0xF0,//START_SYSEX,&#xD;				cCode,//nunchuk command&#xD;  		0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(sdata));</l></block><list><block var="opt"/></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>command</l></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam(command);&#xD;return (board[command] != null);</l></block><list><block var="opt"/></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>command</l></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam(command);&#xD;return board[command];</l></block><list><block var="opt"/></list></block></block></script><script><block s="doReport"><l>0</l></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl set %&apos;motor&apos; to %&apos;state&apos;" type="command" category="arduino"><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ posa el _ a _&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ fijar _ a _&#xD;</translations><inputs><input type="%s" readonly="true">Motor A<options>Motor A&#xD;Motor B</options></input><input type="%s" readonly="true">stop<options>stop&#xD;↩️&#xD;↪️</options></input></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="doDeclareVariables"><list><l>pin1</l><l>pin2</l></list></block><block s="doIfElse"><block s="reportEquals"><block var="motor"/><l>motor B</l></block><script><block s="doSetVar"><l>pin1</l><l>12</l></block><block s="doSetVar"><l>pin2</l><l>13</l></block></script><script><block s="doSetVar"><l>pin1</l><l>8</l></block><block s="doSetVar"><l>pin2</l><l>7</l></block></script></block><block s="doIfElse"><block s="reportEquals"><block var="state"/><l>↩️</l></block><script><block s="digitalWrite"><block var="pin1"/><l><bool>false</bool></l></block><block s="digitalWrite"><block var="pin2"/><l><bool>true</bool></l></block></script><script><block s="doIfElse"><block s="reportEquals"><block var="state"/><l>↪️</l></block><script><block s="digitalWrite"><block var="pin1"/><l><bool>true</bool></l></block><block s="digitalWrite"><block var="pin2"/><l><bool>false</bool></l></block></script><script><block s="digitalWrite"><block var="pin1"/><l><bool>false</bool></l></block><block s="digitalWrite"><block var="pin2"/><l><bool>false</bool></l></block></script></block></script></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl set %&apos;motor&apos; speed to %&apos;speed&apos; %" type="command" category="arduino"><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ posa la velocitat de _ a _&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ fijar velocitat de _ a _&#xD;</translations><inputs><input type="%s" readonly="true">Motor A<options>Motor A&#xD;Motor B</options></input><input type="%n">100</input></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="doDeclareVariables"><list><l>pin</l></list></block><block s="doIfElse"><block s="reportEquals"><block var="motor"/><l>motor B</l></block><script><block s="doSetVar"><l>pin</l><l>10</l></block></script><script><block s="doSetVar"><l>pin</l><l>9</l></block></script></block><block s="pwmWrite"><block var="pin"/><block s="reportProduct"><block var="speed"/><l>2.55</l></block></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl analog reading A1" type="reporter" category="arduino"><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ lectura analògica A1&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ lectura analógica A1&#xD;</translations><inputs></inputs><script><block s="doIfElse"><block s="reportConnected"></block><script><block s="doReport"><block s="reportAnalogReading"><l>1</l></block></block></script><script><block s="doReport"><l>0</l></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl digital reading %&apos;pin&apos;" type="predicate" category="arduino"><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ lectura digital _&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ lectura digital _&#xD;</translations><inputs><input type="%n" readonly="true">5<options>D5=5&#xD;D6=6</options></input></inputs><script><block s="doIfElse"><block s="reportConnected"></block><script><block s="doReport"><block s="reportDigitalReading"><block var="pin"/></block></block></script><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl set servo %&apos;pin&apos; to %&apos;state&apos;" type="command" category="arduino"><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ posa el servo _ a _&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ fijar servo _ en _&#xD;</translations><inputs><input type="%n" readonly="true">5<options>D5=5&#xD;D6=6</options></input><input type="%s">90<options>§_servoValues</options></input></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="servoWrite"><block var="pin"/><block var="state"/></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl set digital pin %&apos;pin&apos; to %&apos;state&apos;" type="command" category="arduino"><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ posa el pin digital _ a _&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ fijar pin digital _ en _&#xD;</translations><inputs><input type="%n" readonly="true">5<options>D5=5&#xD;D6=6</options></input><input type="%b"></input></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="digitalWrite"><block var="pin"/><block var="state"/></block></script></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl IR send %&apos;MESSAGE&apos; by %&apos;CODER&apos;" type="command" category="arduino"><comment x="0" y="0" w="525" collapsed="false">Send IR signal (hexadecimal code) by IR emitter diode on pin 3, using Sony or RC5 protocol.&#xD;&#xD;You can send values from 0 to FFFFFF (6 hexadecimal digits).</comment><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ IR envia _ per _&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ IR envía _ por _&#xD;</translations><inputs><input type="%txt">FFFFFF</input><input type="%txt" readonly="true">Sony<options>Sony&#xD;RC5</options></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>message</l><l>coder</l></list><l>if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[6].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_ir firmware");&#xD;}&#xD;&#xD;var board = this.arduino.board;  //Definition should change according to the context&#xD;if (message === undefined || coder === undefined) {&#xD;  throw new Error("Message and coder are required");&#xD;}&#xD;var smessage = parseInt(message,16);&#xD;smessage = smessage &amp; parseInt("FFFFFF",16);&#xD;if (coder == "RC5") {&#xD;  scoder = 1;&#xD;} else {&#xD;  scoder = 0;&#xD;}&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0xCE,  //Send IR&#xD;      		(smessage &gt;&gt; 17) &amp; 0x7F,&#xD;      		(smessage &gt;&gt; 10) &amp; 0x7F,&#xD;      		(smessage &gt;&gt; 3) &amp; 0x7F,&#xD;      		((smessage &lt;&lt; 4) &amp; parseInt("01110000",2)) | (scoder &amp; parseInt("01111",2)),&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="MESSAGE"/><block var="CODER"/></list></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl IR readings to %&apos;STATE&apos;" type="command" category="arduino"><comment x="0" y="0" w="460" collapsed="false">You can Enable/Disable IR receiver function.&#xD;&#xD;-Default state is disabled.&#xD;-Enabling action allows IR rec function and disables PWM function on pins 3 and 11.&#xD;-Disabling action turns on PWM function again on pins 3 and 11.</comment><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ IR lectures a _&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ IR lecturas a _&#xD;</translations><inputs><input type="%b"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>ac</l></list><l>if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[6].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_ir firmware");&#xD;}&#xD;&#xD;var board = this.arduino.board;&#xD;if (ac) {&#xD;  dat = 0xCC;&#xD;} else {&#xD;  dat = 0xCD;&#xD;}&#xD;var data =[0xF0,//START_SYSEX&#xD;				dat,//IR act/desact command&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><block var="STATE"/></list></block></script></block-definition><block-definition s="$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 $nl IR reading" type="reporter" category="arduino"><comment x="0" y="0" w="462" collapsed="false">Return IR code (hexadecimal) from IR receiver connected to pin 11.&#xD;&#xD;-You must &quot;Enable IR rec&quot; before. This action disables PWM function on pins 3 and 11.&#xD;-After using this receiver you can &quot;Disable IR rec&quot; to turn on PWM function on pins 3 and 11 again.</comment><header></header><code></code><translations>ca:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ IR lectura&#xD;es:$I-0.6-255-0-0 $M-0.6-255-255-0 $A-0.6-0-255-0 $G-0.6-0-255-255 $I-0.6-0-0-255 $N-0.6-255-0-255 $A-0.6-0-0-0 _ IR lectura&#xD;</translations><inputs></inputs><script><block s="doRun"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board,&#xD;    value =1;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[6].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_ir firmware");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0xCB] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0xCB] = function(board) {&#xD;        var irResult = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 25| (board.currentBuffer[3] &amp; 0x7F) &lt;&lt; 18 | (board.currentBuffer[4] &amp; 0x7F) &lt;&lt; 11 | (board.currentBuffer[5] &amp; 0x7F) &lt;&lt; 4 | (board.currentBuffer[6] &amp; 0x7F) &gt;&gt; 3;&#xD;        irResult = irResult &amp; 0xFFFFFF;&#xD;        board.emit("IRrec", irResult);&#xD;    };&#xD;}&#xD;board["IRrec"] = null;&#xD;board.once("IRrec", function(data){board["IRrec"] = data;});&#xD;var data =[0xF0,//START_SYSEX&#xD;				0xCB,//IR recv command&#xD;				0xF7//END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.checkArduinoBoardParam("IRrec");&#xD;return (board["IRrec"] != null);</l></block><list></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list></list><l>var board = this.arduino.board;&#xD;board.getArduinoBoardParam("IRrec")&#xD;return board["IRrec"].toString(16);</l></block><list></list></block></block></script></block-definition></blocks>