<blocks app="Snap! 10.1-dev, https://snap.berkeley.edu" version="2"><block-definition s="when variable %&apos;variable&apos; changes" type="hat" category="variables"><variables><list struct="atomic" id="3">old</list></variables><header></header><code></code><translations>de:Wenn Variable _ sich ändert&#xD;</translations><inputs><input type="%s" readonly="true" irreplaceable="true" initial="1"><options>§_getVarNamesDict</options></input></inputs><script><block s="doIf"><block s="reportVariadicOr"><list><block s="reportNot"><block s="reportListContainsItem"><block s="reportAttributeOf"><l><option>variables</option></l><block s="reportEnvironment"><l><option>caller</option></l></block></block><block var="variable"/></block></block><block s="reportVariadicEquals"><list><block s="reportAttributeOf"><block var="variable"/><block s="reportEnvironment"><l><option>caller</option></l></block></block><block var="old"/></list></block></list></block><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><list></list></block><block s="doSetVar"><l>old</l><block s="reportAttributeOf"><block var="variable"/><block s="reportEnvironment"><l><option>caller</option></l></block></block></block><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script></block-definition><block-definition s="when %&apos;sensor&apos; &gt; %&apos;threshold&apos;" type="hat" category="sensing"><header></header><code></code><translations>de:Wenn _ &gt; _&#xD;</translations><inputs><input type="%s" readonly="true" irreplaceable="true" initial="1">$_volume<options>volume=$_volume&#xD;timer=$_timer</options></input><input type="%n" initial="1">5</input></inputs><script><block s="doReport"><block s="reportVariadicGreaterThan"><list><block s="evaluate"><block s="reportListItem"><block s="reportApplyExtension"><l>txt_transform(name, txt)</l><list><l>unselect</l><block var="sensor"/></list></block><block s="reportNewList"><list><block s="reportNewList"><list><l>volume</l><block s="reifyReporter"><autolambda><block s="reportAudio"><l><option>volume</option></l></block></autolambda><list></list></block></list></block><block s="reportNewList"><list><l>timer</l><block s="reifyReporter"><autolambda><block s="getTimer"></block></autolambda><list></list></block></list></block></list></block></block><list></list></block><block var="threshold"/></list></block></block></script></block-definition><block-definition s="when background switches to %&apos;costume name&apos;" type="hat" category="looks"><header></header><code></code><translations>de:Wenn Hintergrund zu _ wechselt&#xD;</translations><inputs><input type="%s" readonly="true" irreplaceable="true" initial="1"><options>§_dynamicMenu</options></input></inputs><script><block s="doReport"><block s="reportVariadicEquals"><list><block s="reportAttributeOf"><l><option>costume name</option></l><block s="reportGet"><l><option>stage</option></l></block></block><block var="costume name"/></list></block></block></script><scripts><script x="10" y="121.83333333333331"><block s="receiveSlotEvent"><l>costume name</l><l><option>menu</option></l></block><block s="doReport"><block s="reportGetImageAttribute"><l><option>name</option></l><block s="reportAskFor"><block s="reportGet"><l><option>stage</option></l></block><block s="reifyReporter"><autolambda><block s="reportGet"><l><option>costumes</option></l></block></autolambda><list></list></block><list></list></block></block></block></script></scripts></block-definition><block-definition s="has %&apos;test&apos; happened?" type="predicate" category="operators"><variables><list struct="atomic" id="139">last state</list></variables><header></header><code></code><translations>de:hat _ sich ereignet?&#xD;</translations><inputs><input type="%b" initial="1"></input></inputs><script><block s="doIf"><block s="reportVariadicEquals"><list><block var="test"/><block var="last state"/></list></block><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><list></list></block><block s="doSetVar"><l>last state</l><block var="test"/></block><block s="doReport"><block var="test"/></block></script></block-definition><block-definition s="has %&apos;value&apos; changed?" type="predicate" category="variables"><variables><list struct="atomic" id="162">old</list></variables><header></header><code></code><translations>de:hat _ sich verändert?&#xD;</translations><inputs><input type="%s" initial="1"></input></inputs><script><block s="doIf"><block s="reportVariadicEquals"><list><block var="value"/><block var="old"/></list></block><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><list></list></block><block s="doSetVar"><l>old</l><block var="value"/></block><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script></block-definition><block-definition s="when %&apos;value&apos; changes" type="hat" category="control"><variables><list struct="atomic" id="187">old</list></variables><header></header><code></code><translations>de:Wenn _ sich ändert&#xD;</translations><inputs><input type="%s" initial="1"></input></inputs><script><block s="doIf"><block s="reportVariadicEquals"><list><block var="value"/><block var="old"/></list></block><script><block s="doReport"><block s="reportBoolean"><l><bool>false</bool></l></block></block></script><list></list></block><block s="doSetVar"><l>old</l><block var="value"/></block><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script></block-definition></blocks>