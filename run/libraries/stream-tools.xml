<blocks app="Snap! 10-dev, https://snap.berkeley.edu" version="2"><palette><category name="Streams" color="164,0,0,1"/></palette><block-definition s="head of stream %&apos;stream&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="318.8106770833335" collapsed="false">The stream version of ITEM (1) OF.&#xD;The equivalent of SICP function STREAM-CAR.&#xD;&#xD;This block is one of five lower-level stream blocks, directly interacting with the data structure, hiding it from the higher-level stream blocks.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations>pt:o primeiro item do canal _&#xD;</translations><inputs><input type="%l"></input></inputs><script><block s="doReport"><block s="reportListItem"><l>1</l><block var="stream"/></block></block></script><scripts><script x="10" y="130.6666666666666"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="head of stream %l"><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="tail of stream %&apos;stream&apos;" type="reporter" category="Streams"><comment w="461.81067708333336" collapsed="false">The stream version of ALL BUT FIRST OF.&#xD;The equivalent of SICP* function STREAM-CDR.&#xD;&#xD;This block is one of five lower-level stream blocks, directly interacting with the data structure, hiding it from the higher-level stream blocks. The others are: HEAD OF STREAM, IN FRONT OF STREAM, IS STREAM EMPTY?, and THE EMPTY STREAM.&#xD;&#xD;Very Short Introduction To Streams:&#xD;-----------------------------------------------&#xD;Streams, also called lazy lists, are like lists except that items are not computed until they&apos;re needed. This allows for more efficient handling of large computed lists, and even infinite lists.  The only piece of magic is in IN FRONT OF STREAM, whose second input is of type Unevaluated, which means that it&apos;s effectively a procedure, with a sort of invisible gray ring. So HEAD OF STREAM is just ITEM 1 OF, but TAIL OF STREAM has a CALL block to make the computation happen.&#xD;&#xD;For a demo of streams, try the block STREAM DEMO. Plus, each stream block has its own demo(-s), to be accessed from their respective edit windows.&#xD;&#xD;*For a tutorial introduction to streams, read Structure and Interpretation of Computer Programs (SICP), section 3.5 (at the time of writing this Help text, the full text could be read on the internet: https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/index.html); or Brian Harvey&apos;s lecture notes (start on page 74): https://people.eecs.berkeley.edu/&#126;bh/61a-pages/Volume2/notes.pdf&#xD;&#xD;As of release 2 of the Streams library, the data structure of streams was simplified, and so were TAIL OF STREAM and IN FRONT OF STREAM. Streams created with release 1 of the library (perhaps stored in a variable, or otherwise) can be used with release 2 blocks; insofar as they were already (partly) evaluated, they will be re-evaluated.</comment><header></header><code></code><translations>pt:um canal com todos os itens de _ menos o primeiro&#xD;</translations><inputs><input type="%l"></input></inputs><script><block s="doDeclareVariables"><list><l>promise</l></list></block><block s="doWarp"><script><block s="doIf"><block s="reportIsA"><block s="reportListItem"><l>2</l><block var="stream"/></block><l><option>script</option></l></block><script><block s="doSetVar"><l>promise</l><block s="reportListItem"><l>2</l><block var="stream"/></block></block><block s="doReplaceInList"><l>2</l><block var="stream"/><l></l></block></script><list></list></block></script></block><block s="doIfElse"><block var="promise"/><script><block s="doReplaceInList"><l>2</l><block var="stream"/><block s="evaluate"><block var="promise"/><list></list></block></block></script><script><block s="doWaitUntil"><block s="reportIsA"><block s="reportListItem"><l>2</l><block var="stream"/></block><l><option>list</option></l></block></block></script></block><block s="doReport"><block s="reportListItem"><l>2</l><block var="stream"/></block></block></script><scripts><script x="7.14285714285711" y="371.85714285714295"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="tail of stream %l"><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></block></script><script x="7.14285714285711" y="435.5714285714287"><custom-block s="$speechBubble %mlt"><l>Former version of TAIL OF STREAM</l></custom-block><custom-block s="$speechBubble %mlt"><l>Formerly, the data structure of a stream consisted of 4 items:&#xD;1. The head, or 1st data item;&#xD;2. The promise, i.e. an unevaluated reporter prescribing the remainder of the stream (like DNA);&#xD;3. A Boolean indicating whether the promise was evaluated yet;&#xD;4. A link to the remainder, or tail, of the stream (if the promise was evaluated), or FALSE (otherwise).&#xD;&#xD;The current data structure is only 2 items:&#xD;1. The head, or 1st data item;&#xD;2. The promise (if not evaluated yet), or link to the tail of the stream (if the promise was evaluated).</l></custom-block><block s="doWarp"><script><block s="doIf"><block s="reportListItem"><l>3</l><block var="stream"/></block><script><block s="doReport"><block s="reportListItem"><l>4</l><block var="stream"/></block></block></script><list></list></block><block s="doReplaceInList"><l>4</l><block var="stream"/><block s="evaluate"><block s="reportListItem"><l>2</l><block var="stream"/></block><list></list></block></block><block s="doReplaceInList"><l>3</l><block var="stream"/><block s="reportBoolean"><l><bool>true</bool></l></block></block><block s="doReport"><block s="reportListItem"><l>4</l><block var="stream"/></block></block></script></block></script></scripts></block-definition><block-definition s="%&apos;head&apos; in front of stream %&apos;delayed tail&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="317.6106770833337" collapsed="false">The stream version of IN FRONT OF.&#xD;The equivalent of SICP function CONS-STREAM.&#xD;&#xD;The 2nd input parameter is of type Unevaluated. Therefore, calling IN FRONT OF STREAM causes only the first item of the new stream to be evaluated, not the rest of the stream. The latter will be performed, as required, by TAIL OF STREAM.&#xD;&#xD;This block is one of five lower-level stream blocks, directly interacting with the data structure, hiding it from the higher-level stream blocks.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations>pt:a prefixação de _ ao canal _&#xD;</translations><inputs><input type="%s"></input><input type="%anyUE"></input></inputs><script><block s="doReport"><block s="reportNewList"><list><block var="head"/><block var="delayed tail"/></list></block></block></script><scripts><script x="7.142857142857143" y="191.85714285714292"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><l>1</l><custom-block s="stream with numbers from %n"><l>2</l></custom-block></custom-block></block></script><script x="7.142857142857143" y="255.57142857142856"><custom-block s="$speechBubble %mlt"><l>Former version of IN FRONT OF STREAM</l></custom-block><block s="doReport"><block s="reportNewList"><list><block var="head"/><block var="tail"/><block s="reportBoolean"><l><bool>false</bool></l></block><block s="reportBoolean"><l><bool>false</bool></l></block></list></block></block></script></scripts></block-definition><block-definition s="comment %&apos;text&apos;" type="command" category="other"><comment x="0" y="0" w="122.00000000000001" collapsed="false">A multiline text block, that doesn’t *do* anything.</comment><header></header><code></code><translations></translations><inputs><input type="%mlt">no comment!</input></inputs></block-definition><block-definition s="the empty stream" type="reporter" category="Streams"><comment x="0" y="0" w="312.8" collapsed="false">A stream without elements.&#xD;&#xD;This block is one of five lower-level stream blocks, directly interacting with the data structure, hiding it for the higher-level stream blocks.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs></inputs><script><block s="doIf"><block s="reportNot"><block s="reportIsA"><block var="THE EMPTY STREAM"/><l><option>list</option></l></block></block><script><block s="doSetVar"><l>THE EMPTY STREAM</l><block s="reportNewList"><list><l>*the empty stream*</l></list></block></block></script><list></list></block><block s="doReport"><block var="THE EMPTY STREAM"/></block></script><scripts><script x="7.142857142857143" y="152.71666666666675"><custom-block s="comment %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script></scripts></block-definition><block-definition s="$speechBubble %&apos;text&apos;" type="command" category="other"><comment x="0" y="0" w="122.00000000000001" collapsed="false">A multiline text block, that doesn’t *do* anything.</comment><header></header><code></code><translations></translations><inputs><input type="%mlt">no comment!</input></inputs></block-definition><block-definition s="is stream %&apos;stream&apos; empty?" type="predicate" category="Streams"><comment x="0" y="0" w="406.2" collapsed="false">Report if a stream has no elements. &#xD;The stream version of IS EMPTY?.&#xD;The equivalent of SICP function STREAM-NULL?&#xD;&#xD;A stream is considered empty only if it has been computed and is equal to THE EMPTY STREAM.  A stream that has not yet been computed (because it was made with IN FRONT OF STREAM, for example, or with a KEEP whose predicate is never satisfied, isn&apos;t empty even though it may not have any elements.&#xD;&#xD;This block is one of five lower-level stream blocks, directly interacting with the data structure, hiding it for the higher-level stream blocks.&#xD;&#xD;General Info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%l"></input></inputs><script><block s="doReport"><block s="reportVariadicIsIdentical"><list><block var="stream"/><custom-block s="the empty stream"></custom-block></list></block></block></script><scripts><script x="7.142857142857143" y="203.8571428571429"><custom-block s="comment %mlt"><l>Demo</l></custom-block><block s="doReport"><block s="reportNewList"><list><custom-block s="is stream %l empty?"><custom-block s="the empty stream"></custom-block></custom-block><custom-block s="is stream %l empty?"><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block><custom-block s="is stream %l empty?"><custom-block s="stream %mult%s"><list><l></l></list></custom-block></custom-block><custom-block s="is stream %l empty?"><custom-block s="stream %mult%s"><list></list></custom-block></custom-block></list></block></block></script><script x="7.142857142857143" y="322.7619047619048"><custom-block s="comment %mlt"><l>Demo: pathologiocal case (will not terminate)</l></custom-block><block s="doReport"><custom-block s="is stream %l empty?"><custom-block s="keep items %predRing from stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><list><l></l><l>1</l></list></block></autolambda><list></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="stream %&apos;items&apos;" type="reporter" category="Streams" space="true"><comment x="0" y="0" w="343.3333333333333" collapsed="false">Create a stream from a finite collection of items, like the LIST primitive.&#xD;Since this block is typically used for small amounts of data, it does not delay computation of its inputs.&#xD;&#xD;If you are using a list of all the desired values as input, make sure it is specified to be an INPUT LIST&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations>pt:um canal com _&#xD;</translations><inputs><input type="%mult%s" initial="1"></input></inputs><script><block s="doIf"><block s="reportListIsEmpty"><block var="items"/></block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block s="reportListItem"><l>1</l><block var="items"/></block><custom-block s="stream %mult%s"><block s="reportCDR"><block var="items"/></block></custom-block></custom-block></block></script><scripts><script x="10" y="177.01190476190484"><custom-block s="$speechBubble %mlt"><l>Demo: specify individual stream items</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="stream %mult%s"><list><l>1</l><l>2</l></list></custom-block></custom-block></block></script><script x="10" y="240.72619047619045"><custom-block s="$speechBubble %mlt"><l>Demo: use an input list (list dropped on pair of arrows)</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="stream %mult%s"><block s="reportNumbers"><l>1</l><l>7</l></block></custom-block></custom-block></block></script><script x="10" y="319.0357142857143"><custom-block s="$speechBubble %mlt"><l>Demo: in contrast with the above, if you drop a list onto an empty slot,&#xD;it will be considered a single item (which may be what you want, but&#xD;usually you want them to be separate items, so use an input list). </l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="stream %mult%s"><list><block s="reportNumbers"><l>1</l><l>7</l></block></list></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="stream with numbers from %&apos;start&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="374.6106770833333" collapsed="false">The stream version of NUMBERS FROM () TO (), with no ending number because it reports the infinite stream of all the integers greater than or equal to its input.&#xD;&#xD;Read the code!  It&apos;s deceptively simple.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations>pt:um canal com os números a partir de _&#xD;</translations><inputs><input type="%n">1</input></inputs><script><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block var="start"/><custom-block s="stream with numbers from %n"><block s="reportVariadicSum"><list><block var="start"/><l>1</l></list></block></custom-block></custom-block></block></script><scripts><script x="10" y="119.85714285714279"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></block></script><script x="10" y="183.57142857142867"><custom-block s="$speechBubble %mlt"><l>Advanced version supporting both finite and infinite streams</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="stream with numbers from %n to %n step %n"><l>1</l><l>5</l><l>2</l></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="stream repeating %&apos;items&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="332.66666666666674" collapsed="false">Create an infinite stream repeating a finite collection of items.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations>pt:um canal com _&#xD;</translations><inputs><input type="%mult%s" initial="1"></input></inputs><script><block s="doIf"><block s="reportListIsEmpty"><block var="items"/></block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block s="reportListItem"><l>1</l><block var="items"/></block><custom-block s="$gears HELPER stream repeating %l"><custom-block s="%l followed by %s"><block s="reportCDR"><block var="items"/></block><block s="reportListItem"><l>1</l><block var="items"/></block></custom-block></custom-block></custom-block></block></script><scripts><script x="7.142857142857143" y="193.72619047619045"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="stream repeating %mult%s"><list><l>A</l><l>b</l><l>3</l></list></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="generate stream %&apos;function&apos; %&apos;#&apos; w/seeds: %&apos;seeds&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="410.44640066964325" collapsed="false">A highly user-configurable stream generator.&#xD;&#xD;INPUT&#xD;1. Function generating new stream items;&#xD;2. Index (#) of the current item within the stream (may be used by the embedded function);&#xD;3. Seeds, i.e. first items of the stream.&#xD;&#xD;HOW IT WORKS&#xD;E.g. with 2 seeds: when generating item 3, items 1 and 2 are inserted into the 1st and 2nd empty slot, repectively, of the embedded function. When item 4 is generated, items 2 and 3 are inserted … (etc.)&#xD;&#xD;RESULT&#xD;An infinite stream. Open the block editor for an example.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAMS.</comment><header></header><code></code><translations>pt:um canal com os números a partir de _&#xD;</translations><inputs><input type="%repRing">1</input><input type="%upvar"></input><input type="%mult%s"></input></inputs><script><custom-block s="let %upvar $arrowLeft %s"><l>function*</l><custom-block s="substitute vars %s"><block var="function"/></custom-block></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>seeds*</l><block s="reportMonadic"><l><option>id</option></l><block var="seeds"/></block></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>generate</l><block s="reifyScript"><script><custom-block s="let %upvar $arrowLeft %s"><l>head</l><block s="evaluate"><block s="reportAttributeOf"><block var="function*"/><block s="reportEnvironment"><l><option>script</option></l></block></block><block var="seeds*"/></block></custom-block><block s="doSetVar"><l>seeds*</l><block s="reportCDR"><custom-block s="%l followed by %s"><block var="seeds*"/><block var="head"/></custom-block></block></block><block s="doChangeVar"><l>#</l><l>1</l></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block var="head"/><block s="evaluate"><block var="generate"/><list></list></block></custom-block></block></script><list></list></block></custom-block><block s="doSetVar"><l>#</l><block s="reportVariadicSum"><list><block s="reportListAttribute"><l><option>length</option></l><block var="seeds"/></block><l>1</l></list></block></block><block s="doReport"><custom-block s="append streams %mult%anyUE"><list><custom-block s="stream %mult%s"><block var="seeds"/></custom-block><block s="evaluate"><block var="generate"/><list></list></block></list></custom-block></block></script><scripts><script x="7.142857142857143" y="317.57142857142867"><custom-block s="$speechBubble %mlt"><l>Demo: the Fibonacci sequence</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicSum"><list><l></l><l></l></list></block></autolambda><list></list></block><l>#</l><list><l>1</l><l>1</l></list></custom-block></custom-block></block></script><script x="7.142857142857143" y="404.7142857142855"><custom-block s="$speechBubble %mlt"><l>Demo: squares</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><block var="#"/><block var="#"/></list></block></autolambda><list></list></block><l>#</l><list></list></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="map %&apos;function&apos; over stream(s) %&apos;streams&apos;" type="reporter" category="Streams" space="true"><comment x="0" y="0" w="290.2106770833335" collapsed="false">The stream version of variadic MAP (any number of input streams, like MULTMAP in the List utilities library).&#xD;&#xD;All input streams must be either infinite or of the same length.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations>pt:a aplicação de _ aos itens dos canais _&#xD;</translations><inputs><input type="%repRing"></input><input type="%mult%l" initial="1"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block s="reportListItem"><l>1</l><block var="streams"/></block></custom-block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block s="evaluate"><block var="function"/><block s="reportMap"><block s="reifyReporter"><autolambda><custom-block s="head of stream %l"><l/></custom-block></autolambda><list></list></block><block var="streams"/></block></block><custom-block s="map %repRing over stream(s) %mult%l"><block var="function"/><block s="reportMap"><block s="reifyReporter"><autolambda><custom-block s="tail of stream %l"><l/></custom-block></autolambda><list></list></block><block var="streams"/></block></custom-block></custom-block></block></script><scripts><script x="10" y="231.91666666666666"><custom-block s="$speechBubble %mlt"><l>Demo, 1 input stream</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><l></l><l></l></list></block></autolambda><list></list></block><list><custom-block s="stream with numbers from %n"><l>1</l></custom-block></list></custom-block></custom-block></block></script><script x="10" y="334.75000000000006"><custom-block s="$speechBubble %mlt"><l>Demo, 2 input streams</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><l></l><l></l></list></block></autolambda><list></list></block><list><custom-block s="stream with numbers from %n"><l>1</l></custom-block><custom-block s="stream with numbers from %n"><l>11</l></custom-block></list></custom-block></custom-block></block></script><script x="10" y="455.5833333333335"><custom-block s="$speechBubble %mlt"><l> Demo of an integrated version of MAP and KEEP.</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="map %repRing over keep %predRing from map %repRing over stream %l"><block s="reifyReporter"><autolambda><block s="reportJoinWords"><block s="reportListAttribute"><l><option>reverse</option></l><block s="reportTextSplit"><l></l><l><option>letter</option></l></block></block></block></autolambda><list></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><block s="reportTextSplit"><l></l><l><option>letter</option></l></block></block></autolambda><list></list></block><block s="reifyReporter"><autolambda><custom-block s="square %n"><l></l></custom-block></autolambda><list></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script><script x="10" y="612.4166666666667"><custom-block s="$speechBubble %mlt"><l>As of v2 of the Streams library, the block below is obsolete.&#xD;It is kept as a hidden block for upward compatibility with v1.</l></custom-block><custom-block s="$speechBubble %mlt"><custom-block s="map %repRing over stream %mult%l"><block s="reifyReporter"><script></script><list></list></block><list><l/></list></custom-block></custom-block></script></scripts></block-definition><block-definition s="%&apos;variable&apos; $arrowLeft %&apos;value&apos;" type="reporter" category="variables"><comment x="0" y="0" w="94.80000000000001" collapsed="false">Create, and at once initialize, and report, a local variable.</comment><header></header><code></code><translations></translations><inputs><input type="%upvar"></input><input type="%s"></input></inputs><script><block s="doSetVar"><l>variable</l><block var="value"/></block><block s="doReport"><block var="variable"/></block></script></block-definition><block-definition s="flatmap %&apos;function&apos; over stream(s) %&apos;streams&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="344.43169642857157" collapsed="false">Like MAP OVER STREAM(S), but it flattens the result (one level). That is, it requires its first input to be a function that reports a stream, so that MAP would report a stream of streams.  FLATMAP reports a stream whose items are *the items of* the streams reported by that function.&#xD;&#xD;FLATMAP for lists is typically defined using APPEND to join the items of the sublists.  Since streams can be infinite, the substreams can&apos;t be appended.  Instead, FLATMAP uses INTERLEAVE STREAMS to combine the items of the substreams.  Therefore, the order of items in the result is not guaranteed.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%repRing"></input><input type="%mult%l" initial="1"></input></inputs><script><block s="doReport"><custom-block s="$gears flatten stream %l"><custom-block s="map %repRing over stream(s) %mult%l"><block var="function"/><block var="streams"/></custom-block></custom-block></block></script><scripts><script x="7.142857142857143" y="179.8571428571429"><custom-block s="$speechBubble %mlt"><l>Demo: all positive rationals</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="flatmap %repRing over stream(s) %mult%l"><block s="reifyReporter"><autolambda><custom-block s="map %repRing over keep %predRing from map %repRing over stream %l"><block s="reifyReporter"><autolambda><block s="reportJoinWords"><list><l></l><l>/</l><block var="denominator"/></list></block></autolambda><list></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicEquals"><list><custom-block s="GCD (or) %n $∨-1.2-255-255-0 %n"><l></l><block var="denominator"/></custom-block><l>1</l></list></block></autolambda><list></list></block><block s="reifyReporter"><script></script><list></list></block><custom-block s="stream with numbers from %n"><block var="denominator"/></custom-block></custom-block></autolambda><list><l>denominator</l></list></block><list><custom-block s="stream with numbers from %n"><l>1</l></custom-block></list></custom-block></custom-block></block></script><script x="7.142857142857143" y="380.8571428571426"><custom-block s="$speechBubble %mlt"><l>Advanced version, more balanced output</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="$crosshairs flatmap %repRing over stream %l"><block s="reifyReporter"><autolambda><custom-block s="map %repRing over keep %predRing from map %repRing over stream %l"><block s="reifyReporter"><autolambda><block s="reportJoinWords"><list><l></l><l>/</l><block var="denominator"/></list></block></autolambda><list></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicEquals"><list><custom-block s="GCD (or) %n $∨-1.2-255-255-0 %n"><l></l><block var="denominator"/></custom-block><l>1</l></list></block></autolambda><list></list></block><block s="reifyReporter"><script></script><list></list></block><custom-block s="stream with numbers from %n"><block var="denominator"/></custom-block></custom-block></autolambda><list><l>denominator</l></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script><script x="7.142857142857143" y="583.9761904761895"><custom-block s="$speechBubble %mlt"><l>A variety of flatmap working for finite substreams only</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="flatmap finite %repRing over stream %l"><block s="reifyReporter"><autolambda><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><autolambda><block s="reportNewList"><list><block var="#1"/><block var="#2"/></list></block></autolambda><list><l>#1</l></list></block><list><custom-block s="stream with numbers from %n to %n step %n"><l>1</l><block var="#2"/><l>1</l></custom-block></list></custom-block></autolambda><list><l>#2</l></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="map %&apos;function A&apos; over keep %&apos;pred&apos; from map %&apos;function B&apos; over stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="297.8271484375" collapsed="false">A stream version of Python’s list comprehension, with an extra twist. It runs faster than KEEP from MAP, and MAP over KEEP (and MAP over KEEP from MAP, of course).&#xD;&#xD;- For MAP over KEEP from MAP, use all slots;&#xD;- If all you need is MAP over KEEP, leave the third slot empty. &#xD;- For KEEP from MAP, leave the first slot empty. &#xD;- For MAP over MAP (really?), make the second slot TRUE. &#xD;- For KEEP from MAP over KEEP, use an extra KEEP block.&#xD;- (etc.)&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%repRing"></input><input type="%predRing"></input><input type="%repRing"></input><input type="%l"></input></inputs><script><block s="doIf"><block s="reportVariadicEquals"><list><block var="function A"/><block s="reifyReporter"><script></script><list></list></block></list></block><script><block s="doReport"><custom-block s="keep %predRing from map %repRing over stream %l"><block var="pred"/><block var="function B"/><block var="stream"/></custom-block></block></script><list></list></block><block s="doIf"><block s="reportVariadicEquals"><list><block var="function B"/><block s="reifyReporter"><script></script><list></list></block></list></block><script><block s="doReport"><custom-block s="map %repRing over keep %predRing from stream %l"><block var="function A"/><block var="pred"/><block var="stream"/></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="$gears HELPER map %repRing over keep %predRing from map %repRing over stream %l"><block var="function A"/><block var="pred"/><block var="function B"/><block var="stream"/></custom-block></block></script><scripts><script x="10" y="267.3809523809524"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="map %repRing over keep %predRing from map %repRing over stream %l"><block s="reifyReporter"><autolambda><block s="reportJoinWords"><block s="reportListAttribute"><l><option>reverse</option></l><block s="reportTextSplit"><l></l><l><option>letter</option></l></block></block></block></autolambda><list></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><block s="reportTextSplit"><l></l><l><option>letter</option></l></block></block></autolambda><list></list></block><block s="reifyReporter"><autolambda><custom-block s="square %n"><l></l></custom-block></autolambda><list></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script><script x="10" y="418.5476190476185"><custom-block s="$speechBubble %mlt"><l>Demo: MAP OVER KEEP</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="map %repRing over keep %predRing from map %repRing over stream %l"><block s="reifyReporter"><autolambda><block s="reportJoinWords"><block s="reportListAttribute"><l><option>reverse</option></l><block s="reportTextSplit"><l></l><l><option>letter</option></l></block></block></block></autolambda><list></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><block s="reportTextSplit"><l></l><l><option>letter</option></l></block></block></autolambda><list></list></block><block s="reifyReporter"><script></script><list></list></block><custom-block s="stream with numbers from %n"><l>15</l></custom-block></custom-block></custom-block></block></script><script x="10" y="569.7142857142843"><custom-block s="$speechBubble %mlt"><l>Demo: KEEP OVER MAP</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="map %repRing over keep %predRing from map %repRing over stream %l"><block s="reifyReporter"><script></script><list></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><block s="reportTextSplit"><l></l><l><option>letter</option></l></block></block></autolambda><list></list></block><block s="reifyReporter"><autolambda><custom-block s="square %n"><l></l></custom-block></autolambda><list></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="keep items %&apos;pred&apos; from stream %&apos;stream&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="292.4223958333333" collapsed="false">The stream version of KEEP.&#xD;&#xD;WARNING: If the predicate is such that, beyond a certain point, no other item will ever pass the test, a search with KEEP will not terminate. In such cases, use SEGMENT OF STREAM.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations>pt:os itens tais que _ do canal _&#xD;</translations><inputs><input type="%predRing"></input><input type="%l"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block><block s="doUntil"><block s="evaluate"><block var="pred"/><list><custom-block s="head of stream %l"><block var="stream"/></custom-block></list></block><script><block s="doSetVar"><l>stream</l><custom-block s="tail of stream %l"><block var="stream"/></custom-block></block><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block></script></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="stream"/></custom-block><custom-block s="keep items %predRing from stream %l"><block var="pred"/><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></custom-block></block></script><scripts><script x="10" y="314.00000000000006"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items %predRing from stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicEquals"><list><block s="reportModulus"><l></l><l>2</l></block><l>0</l></list></block></autolambda><list></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script><script x="10" y="427.99999999999983"><custom-block s="$speechBubble %mlt"><l> Demo of an integrated version of MAP and KEEP</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="map %repRing over keep %predRing from map %repRing over stream %l"><block s="reifyReporter"><autolambda><block s="reportJoinWords"><block s="reportListAttribute"><l><option>reverse</option></l><block s="reportTextSplit"><l></l><l><option>letter</option></l></block></block></block></autolambda><list></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><block s="reportTextSplit"><l></l><l><option>letter</option></l></block></block></autolambda><list></list></block><block s="reifyReporter"><autolambda><custom-block s="square %n"><l></l></custom-block></autolambda><list></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="keep %&apos;pred&apos; from map %&apos;function&apos; over stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%predRing"></input><input type="%repRing"></input><input type="%l"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block><block s="doIfElse"><block s="evaluate"><block var="pred"/><list><custom-block s="%upvar $arrowLeft %s"><l>map result</l><block s="evaluate"><block var="function"/><list><custom-block s="head of stream %l"><block var="stream"/></custom-block></list></block></custom-block></list></block><script><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block var="map result"/><custom-block s="keep %predRing from map %repRing over stream %l"><block var="pred"/><block var="function"/><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></custom-block></block></script><script><block s="doReport"><custom-block s="keep %predRing from map %repRing over stream %l"><block var="pred"/><block var="function"/><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></block></script></block></script><scripts><script x="7.142857142857143" y="334.7738095238096"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><l></l></block></script></scripts></block-definition><block-definition s="ignore %&apos;x&apos;" type="command" category="control"><comment x="0" y="0" w="206.66666666666666" collapsed="false">This block does nothing.&#xD;Use it when you are calling a reporter&#xD;for its side effect and don&apos;t care about&#xD;its return value.</comment><header></header><code></code><translations>de:ignoriere _&#xD;ca:ignora _&#xD;es:ignorar _&#xD;fr:ignore _&#xD;pt:ignora _&#xD;</translations><inputs><input type="%s"></input></inputs></block-definition><block-definition s="delay %&apos;expression&apos;" type="reporter" category="control"><header></header><code></code><translations></translations><inputs><input type="%anyUE" initial="1"></input></inputs><script><block s="doReport"><block var="expression"/></block></script></block-definition><block-definition s="%&apos;data&apos; followed by %&apos;value&apos;" type="reporter" category="lists"><comment x="0" y="0" w="187.00000000000003" collapsed="false">The counterpart of IN FRONT OF: returns the first input attached at the back end of the list that is the second input</comment><header></header><code></code><translations></translations><inputs><input type="%l"></input><input type="%s"></input></inputs><script><block s="doReport"><block s="reportConcatenatedLists"><list><block var="data"/><block s="reportNewList"><list><block var="value"/></list></block></list></block></block></script></block-definition><block-definition s="let %&apos;variable&apos; $arrowLeft %&apos;value&apos;" type="command" category="variables"><comment x="0" y="0" w="256.9999999999998" collapsed="true">Declare and at once intialize a local variable</comment><header></header><code></code><translations></translations><inputs><input type="%upvar"></input><input type="%s"></input></inputs><script><block s="doSetVar"><l>variable</l><block var="value"/></block></script></block-definition><block-definition s="map %&apos;function&apos; over keep %&apos;pred&apos; from stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%repRing"></input><input type="%predRing"></input><input type="%l"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block><block s="doIfElse"><block s="evaluate"><block var="pred"/><list><custom-block s="head of stream %l"><block var="stream"/></custom-block></list></block><script><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block s="evaluate"><block var="function"/><list><custom-block s="head of stream %l"><block var="stream"/></custom-block></list></block><custom-block s="map %repRing over keep %predRing from stream %l"><block var="function"/><block var="pred"/><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></custom-block></block></script><script><block s="doReport"><custom-block s="map %repRing over keep %predRing from stream %l"><block var="function"/><block var="pred"/><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></block></script></block></script><scripts><script x="7.14285714285711" y="286.98809523809535"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><l></l></block></script></scripts></block-definition><block-definition s="· %&apos;x&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%anyUE"></input></inputs></block-definition><block-definition s="first item+index %&apos;pred&apos; from stream %&apos;stream&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="313.7142857142858" collapsed="false">A combination of FIND FIRST ITEM and INDEX OF, for streams.&#xD;&#xD;INPUTS:  1. condition to be satisfied by item; 2. stream to be searched.&#xD;RESULT: a list of two values: 1. item’s value; 2. index of item within the stream.&#xD;&#xD;If no item within a finite stream satisfies the condition, &quot;&quot; is reported.&#xD;If no item within an *infinite* stream satisfies the condition, the search will not terminate (to prevent this, limit the size of the input stream using SEGMENT OF STREAM).&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAMS.</comment><header></header><code></code><translations></translations><inputs><input type="%predRing"></input><input type="%l"></input></inputs><script><custom-block s="let %upvar $arrowLeft %s"><l>index</l><l>1</l></custom-block><block s="doUntil"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doIf"><block s="evaluate"><block var="pred"/><list><custom-block s="head of stream %l"><block var="stream"/></custom-block></list></block><script><block s="doReport"><block s="reportNewList"><list><custom-block s="head of stream %l"><block var="stream"/></custom-block><block var="index"/></list></block></block></script><list></list></block><block s="doChangeVar"><l>index</l><l>1</l></block><block s="doSetVar"><l>stream</l><custom-block s="tail of stream %l"><block var="stream"/></custom-block></block></script></block><block s="doReport"><l></l></block></script><scripts><script x="7.142857142857143" y="264.7499999999999"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="first item+index %predRing from stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicGreaterThan"><list><l></l><l>20</l></list></block></autolambda><list></list></block><custom-block s="stream with numbers from %n"><l>10</l></custom-block></custom-block></block></script><script x="7.142857142857143" y="351.89285714285694"><custom-block s="$speechBubble %mlt"><l>Demo: not terminating (press the red stop button)</l></custom-block><block s="doReport"><custom-block s="first item+index %predRing from stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><list><l></l><l>0</l></list></block></autolambda><list></list></block><custom-block s="stream with numbers from %n"><l>10</l></custom-block></custom-block></block></script><script x="7.142857142857143" y="439.0357142857137"><custom-block s="$speechBubble %mlt"><l>Demo: terminating because of search limit</l></custom-block><block s="doReport"><custom-block s="first item+index %predRing from stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><list><l></l><l>0</l></list></block></autolambda><list></list></block><custom-block s="segment of stream %l %br starting with first item that %predRing %br ending with next item that %predRing inclusive? %b"><custom-block s="stream with numbers from %n"><l>10</l></custom-block><block s="reifyPredicate"><script></script><list></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicGreaterThan"><list><block var="idx"/><l>100</l></list></block></autolambda><list><l>val</l><l>idx</l></list></block><l><bool>false</bool></l></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="$gears HELPER map %&apos;function A&apos; over keep %&apos;pred&apos; from map %&apos;function B&apos; over stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%repRing"></input><input type="%predRing"></input><input type="%repRing"></input><input type="%l"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block><block s="doIfElse"><block s="evaluate"><block var="pred"/><list><custom-block s="%upvar $arrowLeft %s"><l>intermediate</l><block s="evaluate"><block var="function B"/><list><custom-block s="head of stream %l"><block var="stream"/></custom-block></list></block></custom-block></list></block><script><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block s="evaluate"><block var="function A"/><list><block var="intermediate"/></list></block><custom-block s="$gears HELPER map %repRing over keep %predRing from map %repRing over stream %l"><block var="function A"/><block var="pred"/><block var="function B"/><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></custom-block></block></script><script><block s="doReport"><custom-block s="$gears HELPER map %repRing over keep %predRing from map %repRing over stream %l"><block var="function A"/><block var="pred"/><block var="function B"/><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></block></script></block></script></block-definition><block-definition s="list %&apos;requested&apos; items with %&apos;downstream&apos; of stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="467.05111607142857" collapsed="false">Report a specified number of items from a stream as a list. The “delayed continuation”, starting immediately after the last of the reported items, is made available as an upvar (see inside for demo of continuation; be careful not to use the same identifier for input and upvar continuations).&#xD;&#xD;Replaces SHOW STREAM from version 1 of this library.&#xD;&#xD;The inputs are an integer and a stream. With a positive integer, LIST ... STREAM reports a regular finite list of length less than (for short finite streams) or equal to the integer. It&apos;s useful because an infinite stream can&apos;t be displayed in a finite amount of time.&#xD;&#xD;Alternatively, ”all” (or “Infinity”) may be used as first input, for the showing to continue until the end of the stream will have been reached. Better not try this with infinite streams: the process may never terminate!&#xD;&#xD;Another cause of not terminating:&#xD;1. the input stream is part of a chain of streams AND&#xD;2. the number of elements of the input stream is less than the number of items specified to be reported AND&#xD;3. the first stream of the input chain is infinite.&#xD;For example: LIST ( 10 ) ITEMS OF STREAM ( KEEP ITEMS SUCH THAT ( _ &lt; 5 ) FROM STREAM ( STREAM WITH NUMBERS FROM ( 1 ) ) ).&#xD;Explanation: after the first 4 items, LIST ( 10 ) ITEMS OF STREAM will keep on asking for more input, and STREAM WITH NUMBERS FROM ( 1 ) will keep generating new items forever, each of which will be discarded by KEEP ITEMS SUCH THAT ( _ &lt; 5 ) FROM STREAM, which is the middle part of the chain.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%n" initial="1">10<options>all=Infinity</options></input><input type="%upvar" initial="1"></input><input type="%l" initial="1"></input></inputs><script><custom-block s="let %upvar $arrowLeft %s"><l>items</l><block s="reportNewList"><list></list></block></custom-block><block s="doUntil"><block s="reportVariadicOr"><list><block s="reportVariadicLessThan"><list><block var="requested"/><l>1.5</l></list></block><custom-block s="is stream %l empty?"><block var="stream"/></custom-block></list></block><script><block s="doAddToList"><custom-block s="head of stream %l"><block var="stream"/></custom-block><block var="items"/></block><block s="doChangeVar"><l>requested</l><l>-1</l></block><block s="doSetVar"><l>stream</l><custom-block s="tail of stream %l"><block var="stream"/></custom-block></block></script></block><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doSetVar"><l>downstream</l><custom-block s="delay %anyUE"><custom-block s="the empty stream"></custom-block></custom-block></block><block s="doReport"><block var="items"/></block></script><list></list></block><block s="doSetVar"><l>downstream</l><custom-block s="delay %anyUE"><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></block><block s="doReport"><custom-block s="%l followed by %s"><block var="items"/><custom-block s="head of stream %l"><block var="stream"/></custom-block></custom-block></block></script><scripts><script x="10" y="364.15476190476176"><custom-block s="comment %mlt"><l>Demo of primary output</l></custom-block><block s="doReport"><custom-block s="list %n items with %upvar of stream %l"><l>10</l><l>downstream</l><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></block></script><script x="10" y="445.8928571428566"><custom-block s="comment %mlt"><l>Demo of downstream, be careful to use CALL.</l></custom-block><custom-block s="ignore %s"><custom-block s="list %n items with %upvar of stream %l"><l>10</l><l>downstream</l><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block><custom-block s="ignore %s"><custom-block s="list %n items with %upvar of stream %l"><l>10</l><l>downstream</l><block s="evaluate"><block var="downstream"/><list></list></block></custom-block></custom-block><block s="doReport"><custom-block s="list %n items with %upvar of stream %l"><l>5</l><l>downstream</l><block s="evaluate"><block var="downstream"/><list></list></block></custom-block></block></script></scripts></block-definition><block-definition s="incrementally combine stream %&apos;stream&apos; $nl using %&apos;combiner&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="409.68571428571425" collapsed="false">This is the stream version of the COMBINE block for lists.&#xD;&#xD;Since lists are finite, it&apos;s always possible to combine *all* items of a list.  For example, given a list of numbers, it&apos;s possible to add all the numbers and report a single number, the sum.&#xD;&#xD;Since a stream can be infinite, it&apos;s not, in general, possible to combine all its items.  Instead, this block reports a stream.  The first item of the result stream is the first item of the input stream; the second item of the result stream is the result of combining the first two items of the input; the third item is the result of combining the first three items; and so on.&#xD;&#xD;INPUTS:&#xD;1. input stream&#xD;2. combiner (function)&#xD;&#xD;RESULT&#xD;A stream. The first element is the head of the input stream. Each following element is calculated by applying the combiner on the preceding *result* item and the value of the current /input/ item:&#xD;&#xD;result (i) = combiner (result (i-1), input (i)).&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%l"></input><input type="%repRing"></input></inputs><script><custom-block s="let %upvar $arrowLeft %s"><l>combined</l><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="stream"/></custom-block><custom-block s="map %repRing over stream(s) %mult%l"><block var="combiner"/><list><block var="combined"/><custom-block s="tail of stream %l"><block var="stream"/></custom-block></list></custom-block></custom-block></custom-block><block s="doReport"><block var="combined"/></block></script><scripts><script x="7.142857142857143" y="311.8571428571429"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>5</l><custom-block s="incrementally combine stream %l %br using %repRing"><custom-block s="stream with numbers from %n"><l>1</l></custom-block><block s="reifyReporter"><autolambda><block s="reportJoinWords"><list><l></l><l></l></list></block></autolambda><list></list></block></custom-block></custom-block></block></script><script x="7.142857142857143" y="416.9999999999997"><custom-block s="$speechBubble %mlt"><l>Demo: advanced, and somewhat faster, version</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>5</l><custom-block s="$flash integrate %repRing with precursor %s over stream %l"><block s="reifyReporter"><autolambda><block s="reportJoinWords"><list><l></l><l></l></list></block></autolambda><list></list></block><l></l><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="stream with numbers from %&apos;start&apos; to %&apos;end&apos; step %&apos;step&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations>pt:um canal com os números a partir de _&#xD;</translations><inputs><input type="%n">1</input><input type="%n" initial="1">Infinity<options>Infinity</options></input><input type="%n" initial="1">1</input></inputs><script><block s="doIf"><block s="reportVariadicGreaterThan"><list><block s="reportVariadicProduct"><list><block s="reportDifference"><block var="start"/><block var="end"/></block><block var="step"/></list></block><l>0</l></list></block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block var="start"/><custom-block s="stream with numbers from %n to %n step %n"><block s="reportVariadicSum"><list><block var="start"/><block var="step"/></list></block><block var="end"/><block var="step"/></custom-block></custom-block></block></script><scripts><script x="10" y="219.58333333333337"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items with %upvar of stream %l"><l>10</l><l>downstream</l><custom-block s="stream with numbers from %n to %n step %n"><l>1</l><l>5</l><l>0.5</l></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="uniques of stream %&apos;stream&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="297.604743303572" collapsed="false">The stream version of UNIQUES OF (list).&#xD;&#xD;This implementation though elegant is unsuitable for large data. Edit the block to find a faster but less elegant version.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%l"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="stream"/></custom-block><custom-block s="uniques of stream %l"><custom-block s="keep items %predRing from stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicNotEquals"><list><l></l><custom-block s="head of stream %l"><block var="stream"/></custom-block></list></block></autolambda><list></list></block><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></custom-block></custom-block></block></script><scripts><script x="7.142857142857143" y="230.22619047619048"><custom-block s="$speechBubble %mlt"><l>Demo: from a stream of random integers, UNIQUES OF STREAM picks just the “new” ones.</l></custom-block><block s="doReport"><block s="reportListAttribute"><l><option>sorted</option></l><custom-block s="list %n items of stream %l"><l>30</l><custom-block s="uniques of stream %l"><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportRandom"><l>1</l><l>30</l></block></autolambda><list></list></block><l>#</l><list></list></custom-block></custom-block></custom-block></block></block></script><script x="7.142857142857143" y="361.2738095238094"><custom-block s="$speechBubble %mlt"><l>Demo of a somewhat less elegant, yet faster implementation of UNIQUES OF STREAM&#xD;(edit to see how it works). Also, the defintion of uniqueness may be specified.</l></custom-block><block s="doReport"><block s="reportListAttribute"><l><option>sorted</option></l><custom-block s="list %n items of stream %l"><l>30</l><custom-block s="$flash uniques by %predRing latest 1st? %b of stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicNotEquals"><list><l></l><l></l></list></block></autolambda><list></list></block><l><bool>false</bool></l><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportRandom"><l>1</l><l>30</l></block></autolambda><list></list></block><l>#</l><list></list></custom-block></custom-block></custom-block></block></block></script></scripts></block-definition><block-definition s="map %&apos;function&apos; over stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="181.33333333333334" collapsed="false">As of v2 of the Streams library, this block is obsolete (kept as a hidden block for upward compatibility from v1).</comment><header></header><code></code><translations>pt:a aplicação de _ aos itens dos canais _&#xD;</translations><inputs><input type="%repRing"></input><input type="%mult%l" initial="1"></input></inputs><script><block s="doReport"><custom-block s="map %repRing over stream(s) %mult%l"><block var="function"/><block var="stream"/></custom-block></block></script></block-definition><block-definition s="substitute vars %&apos;lambda&apos;" type="reporter" category="variables"><comment x="0" y="0" w="292.8571428571426" collapsed="true">Replace any variable from the caller scope with its value</comment><header></header><code></code><translations></translations><inputs><input type="%s">lambda</input></inputs><script><block s="doReport"><block s="reportJoinWords"><custom-block s="$gears substitute vars %s %s %s"><block s="reportTextSplit"><block var="lambda"/><l><option>blocks</option></l></block><block s="reportEnvironment"><l><option>caller</option></l></block><block s="reportAttributeOf"><block s="reifyReporter"><autolambda><block s="reportEnvironment"><l><option>caller</option></l></block></autolambda><list></list></block><block s="reportEnvironment"><l><option>caller</option></l></block></block></custom-block></block></block></script></block-definition><block-definition s="$gears substitute vars %&apos;blocks&apos; %&apos;internal scope&apos; %&apos;external scope&apos;" type="reporter" category="variables" helper="true"><comment x="0" y="0" w="152.0238095238095" collapsed="false">Replace any variable from the second scope, whose name is not used for a variable within the first scope, with its value.</comment><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%s"></input><input type="%s"></input></inputs><script><block s="doIf"><block s="reportNot"><block s="reportIsA"><block var="blocks"/><l><option>list</option></l></block></block><script><block s="doReport"><block var="blocks"/></block></script><list></list></block><custom-block s="let %upvar $arrowLeft %s"><l>var name</l><block s="reportListItem"><l>2</l><block var="blocks"/></block></custom-block><block s="doIf"><block s="reportVariadicAnd"><list><block s="reportVariadicEquals"><list><block s="reportListItem"><l>1</l><block var="blocks"/></block><block s="reifyReporter"><autolambda><block var=" "/></autolambda><list></list></block></list></block><block s="reportListContainsItem"><block s="reportAttributeOf"><l><option>variables</option></l><block var="external scope"/></block><block var="var name"/></block><block s="reportNot"><block s="reportListContainsItem"><block s="reportAttributeOf"><l><option>variables</option></l><block var="internal scope"/></block><block var="var name"/></block></block></list></block><script><block s="doReport"><custom-block s="blockify %l"><custom-block s="get var %s %s"><block var="var name"/><block var="external scope"/></custom-block></custom-block></block></script><list></list></block><block s="doReport"><block s="reportMap"><block s="reifyReporter"><autolambda><custom-block s="$gears substitute vars %s %s %s"><l></l><block var="internal scope"/><block var="external scope"/></custom-block></autolambda><list></list></block><block var="blocks"/></block></block></script></block-definition><block-definition s="get var %&apos;name&apos; %&apos;ctx&apos;" type="reporter" category="variables" helper="true"><header></header><code></code><translations></translations><inputs><input type="%s">name</input><input type="%s">ctx</input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportAttributeOf"><block s="reportJoinWords"><block s="reportNewList"><list><block s="reifyReporter"><autolambda><block var=" "/></autolambda><list></list></block><block var="name"/></list></block></block><block var="ctx"/></block><list></list></block></block></script></block-definition><block-definition s="blockify %&apos;data&apos;" type="reporter" category="lists"><header></header><code></code><translations></translations><inputs><input type="%l"></input></inputs><script><block s="doReport"><block s="reportIfElse"><block s="reportIsA"><block var="data"/><l><option>list</option></l></block><block s="reportJoinWords"><list><block s="reifyReporter"><autolambda><block s="reportNewList"><list></list></block></autolambda><list></list></block><block s="reportCONS"><block s="reportListAttribute"><l><option>length</option></l><block var="data"/></block><block s="reportMap"><block s="reportEnvironment"><l><option>script</option></l></block><block var="data"/></block></block></list></block><block s="reportIfElse"><block s="reportIsA"><block var="data"/><l><option>Boolean</option></l></block><block s="reportJoinWords"><list><block s="reifyPredicate"><autolambda><block s="reportBoolean"><l><bool>true</bool></l></block></autolambda><list></list></block><block var="data"/></list></block><block s="reportIfElse"><block s="reportIsA"><block var="data"/><l><option>script</option></l></block><block s="reportJoinWords"><list><block s="reifyReporter"><autolambda><block s="reifyReporter"><script></script><list></list></block></autolambda><list></list></block><block var="data"/></list></block><block var="data"/></block></block></block></block></script></block-definition><block-definition s="$gears segment of stream %&apos;stream&apos; once %&apos;start condition&apos; until %&apos;end condition&apos; inclusive? %&apos;include&apos; index %&apos;index&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%l"></input><input type="%predRing" initial="1"></input><input type="%predRing"></input><input type="%b" initial="1">false</input><input type="%s" initial="1"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block><block s="doIf"><block s="evaluate"><block var="start condition"/><list><custom-block s="head of stream %l"><block var="stream"/></custom-block><block var="index"/></list></block><script><block s="doReport"><custom-block s="$gears copy stream %l until %predRing inclusive? %b index %s"><block var="stream"/><block var="end condition"/><block var="include"/><l>1</l></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="$gears segment of stream %l once %predRing until %predRing inclusive? %b index %s"><custom-block s="tail of stream %l"><block var="stream"/></custom-block><block var="start condition"/><block var="end condition"/><block var="include"/><block s="reportVariadicSum"><list><block var="index"/><l>1</l></list></block></custom-block></block></script><scripts><script x="10" y="719.1666666666666"><custom-block s="$speechBubble %mlt"><l>By contrast, a version of the above with KEEP&#xD;will not terminate (use red button to stop manually).</l></custom-block><block s="doReport"><l></l></block></script><script x="10" y="791.1666666666666"><custom-block s="$speechBubble %mlt"><l>Demo using the index of each item in the halt condition,&#xD;and not including the final item: (3, 4, 5, 6)</l></custom-block><block s="doReport"><l></l></block></script></scripts></block-definition><block-definition s="$gears copy stream %&apos;stream&apos; until %&apos;end condition&apos; inclusive? %&apos;include&apos; index %&apos;index&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%l"></input><input type="%predRing"></input><input type="%b" initial="1">false</input><input type="%s" initial="1"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block><block s="doIf"><block s="reportNot"><block s="evaluate"><block var="end condition"/><list><custom-block s="head of stream %l"><block var="stream"/></custom-block><block var="index"/></list></block></block><script><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="stream"/></custom-block><custom-block s="$gears copy stream %l until %predRing inclusive? %b index %s"><custom-block s="tail of stream %l"><block var="stream"/></custom-block><block var="end condition"/><block var="include"/><block s="reportVariadicSum"><list><block var="index"/><l>1</l></list></block></custom-block></custom-block></block></script><list></list></block><block s="doIf"><block var="include"/><script><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="stream"/></custom-block><custom-block s="the empty stream"></custom-block></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><scripts><script x="10" y="719.1666666666666"><custom-block s="$speechBubble %mlt"><l>By contrast, a version of the above with KEEP&#xD;will not terminate (use red button to stop manually).</l></custom-block><block s="doReport"><l></l></block></script><script x="10" y="791.1666666666666"><custom-block s="$speechBubble %mlt"><l>Demo using the index of each item in the halt condition,&#xD;and not including the final item: (3, 4, 5, 6)</l></custom-block><block s="doReport"><l></l></block></script></scripts></block-definition><block-definition s="$flash uniques by %&apos;comparator&apos; latest 1st? %&apos;latest 1st&apos; of stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="363.8571428571429" collapsed="false">Reports &quot;unique&quot; items from a stream. An item&apos;s unicity is defined as it satisfying the specified condition (&quot;comparator&quot;) against any of the earlier reported items.&#xD;&#xD;Within the comparator, the first empty slot denotes the current item, the second empty slot denotes any of the earlier reported items.&#xD;&#xD;With the comparator ring left empty, the default comparator is _ ≠ _.&#xD;&#xD;If the switch “latest 1st” is true, each input item is compared with the latest of all earlier results, then with the second latest, and so on. If the switch is false, the first cimparison will be with the oldest of all earlier results. Though this will not influence nthe outcome, one of the approaches is probably faster.</comment><header></header><code></code><translations></translations><inputs><input type="%predRing" initial="1"></input><input type="%b" initial="1">true</input><input type="%l"></input></inputs><script><block s="doReport"><custom-block s="$gears HELPER $flash uniques by %predRing of stream %l %l %repRing"><block s="reportIfElse"><block s="reportVariadicEquals"><list><block var="comparator"/><block s="reifyPredicate"><script></script><list></list></block></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicNotEquals"><list><l></l><l></l></list></block></autolambda><list></list></block><block var="comparator"/></block><block var="stream"/><block s="reportNewList"><list></list></block><block s="reportIfElse"><block var="latest 1st"/><block s="reifyReporter"><autolambda><block s="reportCONS"><l></l><l/></block></autolambda><list></list></block><block s="reifyReporter"><autolambda><custom-block s="%s following %l"><l></l><l/></custom-block></autolambda><list></list></block></block></custom-block></block></script><scripts><script x="7.142857142857143" y="191.8571428571429"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><block s="reportListAttribute"><l><option>sorted</option></l><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="$flash uniques by %predRing latest 1st? %b of stream %l"><block s="reifyPredicate"><script></script><list></list></block><l><bool>true</bool></l><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportRandom"><l>1</l><l>10</l></block></autolambda><list></list></block><l>#</l><list></list></custom-block></custom-block></custom-block></block></block></script><script x="7.142857142857143" y="328.3095238095242"><custom-block s="$speechBubble %mlt"><l>Demo: only new record highs - note the comparator!</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="$flash uniques by %predRing latest 1st? %b of stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicGreaterThan"><list><l></l><l></l></list></block></autolambda><list></list></block><l><bool>true</bool></l><custom-block s="stream %mult%s"><list><l>3</l><l>1</l><l>5</l><l>6</l><l>7</l><l>6</l><l>7</l><l>9</l><l>8</l></list></custom-block></custom-block></custom-block></block></script><script x="7.142857142857143" y="433.4523809523809"><custom-block s="$speechBubble %mlt"><l>Demo: alternative implementation of SIEVE.&#xD;For efficiency, each input item is compared with the oldest of earlier results (= 2) first.</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>100</l><custom-block s="$flash uniques by %predRing latest 1st? %b of stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicNotEquals"><list><block s="reportModulus"><l></l><l></l></block><l>0</l></list></block></autolambda><list></list></block><l><bool>false</bool></l><custom-block s="stream with numbers from %n"><l>2</l></custom-block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="$gears HELPER $flash uniques by %&apos;comparator&apos; of stream %&apos;stream&apos; %&apos;history&apos; %&apos;appender&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%predRing" initial="1"></input><input type="%l"></input><input type="%l"></input><input type="%repRing" initial="1">true</input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block><block s="doUntil"><block s="reportVariadicEquals"><list><block s="reportFindFirst"><block s="reifyPredicate"><autolambda><block s="reportNot"><block s="evaluate"><block var="comparator"/><list><custom-block s="head of stream %l"><block var="stream"/></custom-block><l></l></list></block></block></autolambda><list></list></block><block var="history"/></block><l></l></list></block><script><block s="doSetVar"><l>stream</l><custom-block s="tail of stream %l"><block var="stream"/></custom-block></block><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block></script></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="stream"/></custom-block><custom-block s="$gears HELPER $flash uniques by %predRing of stream %l %l %repRing"><block var="comparator"/><custom-block s="tail of stream %l"><block var="stream"/></custom-block><block s="evaluate"><block var="appender"/><list><custom-block s="head of stream %l"><block var="stream"/></custom-block><block var="history"/></list></block><block var="appender"/></custom-block></custom-block></block></script></block-definition><block-definition s="$flash integrate %&apos;combiner&apos; with precursor %&apos;precursor&apos; over stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="113.57142857142865" collapsed="false">An advanced version of INCREMENTALLY COMBINE. The functional difference isi the “precursor”, the would-be item (0) of the result stream.</comment><header></header><code></code><translations></translations><inputs><input type="%repRing" initial="1"></input><input type="%s" initial="1"></input><input type="%l"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="%upvar $arrowLeft %s"><l>head</l><block s="evaluate"><block var="combiner"/><list><block var="precursor"/><custom-block s="head of stream %l"><block var="stream"/></custom-block></list></block></custom-block><custom-block s="$flash integrate %repRing with precursor %s over stream %l"><block var="combiner"/><block var="head"/><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></custom-block></block></script><scripts><script x="7.142857142857143" y="246.24999999999997"><custom-block s="$speechBubble %mlt"><l>Demo: advanced, and somewhat faster, version</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>5</l><custom-block s="$flash integrate %repRing with precursor %s over stream %l"><block s="reifyReporter"><autolambda><block s="reportJoinWords"><list><l></l><l></l></list></block></autolambda><list></list></block><l>A.</l><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="append streams %&apos;streams&apos;" type="reporter" category="Streams" space="true"><comment x="0" y="0" w="179.46770833333343" collapsed="false">Append any number of streams.&#xD;&#xD;To be used only if all streams but the last are finite; otherwise use INTERLEAVE STREAMS.&#xD;&#xD;General info in streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%mult%anyUE" initial="2"></input></inputs><script><block s="doIf"><block s="reportListIsEmpty"><block s="reportCDR"><block var="streams"/></block></block><script><block s="doReport"><block s="reportIfElse"><block s="reportListIsEmpty"><block var="streams"/></block><custom-block s="the empty stream"></custom-block><block s="evaluate"><block s="reportListItem"><l>1</l><block var="streams"/></block><list></list></block></block></block></script><list><custom-block s="is stream %l empty?"><custom-block s="%upvar $arrowLeft %s"><l>first</l><block s="evaluate"><block s="reportListItem"><l>1</l><block var="streams"/></block><list></list></block></custom-block></custom-block><script><block s="doReport"><custom-block s="append streams %mult%anyUE"><block s="reportCDR"><block var="streams"/></block></custom-block></block></script></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="first"/></custom-block><custom-block s="append streams %mult%anyUE"><block s="reportCONS"><custom-block s="delay %anyUE"><custom-block s="tail of stream %l"><block var="first"/></custom-block></custom-block><block s="reportCDR"><block var="streams"/></block></block></custom-block></custom-block></block></script><scripts><script x="13.333333333333307" y="437.25000000000017"><custom-block s="$speechBubble %mlt"><l>An example with several input streams</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="append streams %mult%anyUE"><list><custom-block s="the empty stream"></custom-block><custom-block s="stream %mult%s"><list><l>1</l><l>2</l><l>3</l></list></custom-block><custom-block s="stream %mult%s"><list><l>11</l></list></custom-block><custom-block s="stream with numbers from %n"><l>21</l></custom-block></list></custom-block></custom-block></block></script><script x="12.666666666666679" y="321.0833333333333"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="append streams %mult%anyUE"><list><custom-block s="stream %mult%s"><list><l>1</l><l>2</l><l>3</l></list></custom-block><custom-block s="stream with numbers from %n"><l>11</l></custom-block></list></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="$crosshairs flatmap %&apos;function&apos; over stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="293.003125" collapsed="false">A variation of FLATMAP delivering a more even distribution of output items over mapped substreams.&#xD;Applicable only if function (input 1) will create streams.&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%repRing"></input><input type="%l"></input></inputs><script><block s="doReport"><custom-block s="$crosshairs flatten stream %l"><custom-block s="map %repRing over stream(s) %mult%l"><block var="function"/><list><block var="stream"/></list></custom-block></custom-block></block></script><scripts><script x="10" y="103"><custom-block s="$speechBubble %mlt"><l>Demo: all positive rationals</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="$crosshairs flatmap %repRing over stream %l"><block s="reifyReporter"><autolambda><custom-block s="map %repRing over keep %predRing from map %repRing over stream %l"><block s="reifyReporter"><autolambda><block s="reportJoinWords"><list><l></l><l>/</l><block var="denominator"/></list></block></autolambda><list></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicEquals"><list><custom-block s="GCD (or) %n $∨-1.2-255-255-0 %n"><l></l><block var="denominator"/></custom-block><l>1</l></list></block></autolambda><list></list></block><block s="reifyReporter"><script></script><list></list></block><custom-block s="stream with numbers from %n"><block var="denominator"/></custom-block></custom-block></autolambda><list><l>denominator</l></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="GCD (or) %&apos;a&apos; $∨-1.2-255-255-0 %&apos;b&apos;" type="reporter" category="operators"><comment x="0" y="0" w="230.66666666666666" collapsed="false">Reports the greatest common divisor of its inputs.&#xD;If the inputs are values in {0,1} then this is equivalent to the logical OR of the values, with 0=False, 1=True.  Hence the APL symbol ∨.&#xD;Also accepts Snap! Booleans as inputs.</comment><header></header><code></code><translations></translations><inputs><input type="%n"></input><input type="%n"></input></inputs><script><block s="doReport"><block s="evaluate"><custom-block s="scalar -&gt; hyper %repRing"><block s="reifyReporter"><autolambda><custom-block s="simple gcd %n %n"><l></l><l></l></custom-block></autolambda><list></list></block></custom-block><list><custom-block s="de-boolean %s"><block var="a"/></custom-block><custom-block s="de-boolean %s"><block var="b"/></custom-block></list></block></block></script></block-definition><block-definition s="simple gcd %&apos;a&apos; %&apos;b&apos;" type="reporter" category="other" helper="true"><header></header><code></code><translations></translations><inputs><input type="%n"></input><input type="%n"></input></inputs><script><block s="doIf"><block s="reportVariadicEquals"><list><block var="b"/><l>0</l></list></block><script><block s="doReport"><block var="a"/></block></script><list></list></block><block s="doReport"><custom-block s="simple gcd %n %n"><block var="b"/><block s="reportModulus"><block var="a"/><block var="b"/></block></custom-block></block></script></block-definition><block-definition s="scalar -&gt; hyper %&apos;func&apos;" type="reporter" category="control" helper="true"><comment x="0" y="0" w="218" collapsed="false">Takes a dyadic scalar function as input, and&#xD;hyperizes it, so that it can take lists as inputs.&#xD;&#xD;Don&apos;t use on slow functions (this has compiled map calls).  Meant for use on primitives.</comment><header></header><code></code><translations></translations><inputs><input type="%repRing"></input></inputs><script><block s="doDeclareVariables"><list><l>hyper func</l><l>scalarized</l></list></block><block s="doSetVar"><l>hyper func</l><block s="reifyReporter"><script><block s="doWarp"><script><block s="doIfElse"><custom-block s="scalar? %s"><block var="a"/></custom-block><script><block s="doIfElse"><custom-block s="scalar? %s"><block var="b"/></custom-block><script><block s="doReport"><block s="evaluate"><block var="func"/><list><custom-block s="scalar-value helper %s"><block var="a"/></custom-block><custom-block s="scalar-value helper %s"><block var="b"/></custom-block></list></block></block></script><script><block s="doSetVar"><l>scalarized</l><custom-block s="scalar-value helper %s"><block var="a"/></custom-block></block><block s="doIf"><block s="reportVariadicEquals"><list><l></l><block s="reportAtomicFindFirst"><block s="reifyPredicate"><autolambda><block s="reportIsA"><l></l><l><option>list</option></l></block></autolambda><list></list></block><block var="b"/></block></list></block><script><block s="doReport"><block s="reportAtomicMap"><block s="reifyReporter"><autolambda><block s="evaluate"><block var="func"/><list><block var="scalarized"/><l></l></list></block></autolambda><list></list></block><block var="b"/></block></block></script><list></list></block><block s="doReport"><block s="reportMap"><block s="reifyReporter"><autolambda><block s="evaluate"><block var="hyper func"/><list><block var="scalarized"/><l></l></list></block></autolambda><list></list></block><block var="b"/></block></block></script></block></script><script><block s="doIfElse"><custom-block s="scalar? %s"><block var="b"/></custom-block><script><block s="doSetVar"><l>scalarized</l><custom-block s="scalar-value helper %s"><block var="b"/></custom-block></block><block s="doIf"><block s="reportVariadicEquals"><list><l></l><block s="reportAtomicFindFirst"><block s="reifyPredicate"><autolambda><block s="reportIsA"><l></l><l><option>list</option></l></block></autolambda><list></list></block><block var="a"/></block></list></block><script><block s="doReport"><block s="reportAtomicMap"><block s="reifyReporter"><autolambda><block s="evaluate"><block var="func"/><list><l></l><block var="scalarized"/></list></block></autolambda><list></list></block><block var="a"/></block></block></script><list></list></block><block s="doReport"><block s="reportMap"><block s="reifyReporter"><autolambda><block s="evaluate"><block var="hyper func"/><list><l></l><block var="scalarized"/></list></block></autolambda><list></list></block><block var="a"/></block></block></script><script><block s="doIf"><block s="reportVariadicAnd"><list><block s="reportVariadicEquals"><list><l></l><block s="reportAtomicFindFirst"><block s="reifyPredicate"><autolambda><block s="reportIsA"><l></l><l><option>list</option></l></block></autolambda><list></list></block><block var="a"/></block></list></block><block s="reportVariadicEquals"><list><l></l><block s="reportAtomicFindFirst"><block s="reifyPredicate"><autolambda><block s="reportIsA"><l></l><l><option>list</option></l></block></autolambda><list></list></block><block var="b"/></block></list></block></list></block><script><block s="doReport"><custom-block s="multimap %repRing over %mult%l"><block var="func"/><list><block var="a"/><block var="b"/></list></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="multimap %repRing over %mult%l"><block var="hyper func"/><list><block var="a"/><block var="b"/></list></custom-block></block></script></block></script></block></script></block></script><list><l>a</l><l>b</l></list></block></block><block s="doReport"><block var="hyper func"/></block></script></block-definition><block-definition s="scalar? %&apos;x&apos;" type="predicate" category="other" helper="true"><comment x="0" y="0" w="199.33333333333334" collapsed="false">Reports True if the input is an APL scalar,&#xD;i.e., either an atomic (non-list) value, or&#xD;an array (list of lists) of any depth with only&#xD;one atomic item, e.g., (list (list (list (3)))).</comment><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doIf"><block s="reportNot"><block s="reportIsA"><block var="x"/><l><option>list</option></l></block></block><script><block s="doReport"><block s="reportBoolean"><l><bool>true</bool></l></block></block></script><list></list></block><block s="doReport"><block s="reportVariadicEquals"><list><block s="reportAtomicCombine"><custom-block s="shape of $⍴-1-255-255-0 %l"><block var="x"/></custom-block><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><l></l><l></l></list></block></autolambda><list></list></block></block><l>1</l></list></block></block></script></block-definition><block-definition s="shape of $⍴-1-255-255-0 %&apos;data&apos;" type="reporter" category="lists"><comment x="0" y="0" w="310" collapsed="false">Reports a flat list of the maximum size of the input array along&#xD;each dimension: number of rows, number of columns, etc.&#xD;&quot;Maximum&quot; because it works even if the array isn&apos;t uniformly shaped.</comment><header></header><code></code><translations></translations><inputs><input type="%l"></input></inputs><script><block s="doReport"><block s="reportListAttribute"><l><option>dimensions</option></l><block var="data"/></block></block></script></block-definition><block-definition s="scalar-value helper %&apos;x&apos;" type="reporter" category="other" helper="true"><comment x="0" y="0" w="200.66666666666663" collapsed="false">The input must be a value for which SCALAR? reports true, i.e., either an atom or a list of any depth but only one scalar item of item of... etc.  This function returns the underlying scalar (number, etc.).</comment><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doIf"><block s="reportNot"><block s="reportIsA"><block var="x"/><l><option>list</option></l></block></block><script><block s="doReport"><block var="x"/></block></script><list></list></block><block s="doReport"><custom-block s="scalar-value helper %s"><block s="reportListItem"><l>1</l><block var="x"/></block></custom-block></block></script></block-definition><block-definition s="multimap %&apos;function&apos; over %&apos;lists&apos;" type="reporter" category="lists"><comment x="0" y="0" w="267.3333333333333" collapsed="false">Takes as input a function of N inputs and N lists.&#xD;The function is called with item 1 of all the lists as its inputs, with item 2 of all the lists as its inputs, and so on.  (The lists should all be the same length.)</comment><header></header><code></code><translations></translations><inputs><input type="%repRing"></input><input type="%mult%l"></input></inputs><script><block s="doReport"><block s="reportMap"><block s="reifyReporter"><autolambda><block s="evaluate"><block var="function"/><custom-block s="%s"><l></l></custom-block></block></autolambda><list></list></block><block s="reportListAttribute"><l><option>columns</option></l><block var="lists"/></block></block></block></script></block-definition><block-definition s="%&apos;x&apos;" type="reporter" category="lists"><comment x="0" y="0" w="105.33333333333331" collapsed="false">The identity function reports its input.</comment><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doReport"><block var="x"/></block></script></block-definition><block-definition s="de-boolean %&apos;n&apos;" type="reporter" category="other" helper="true"><header></header><code></code><translations></translations><inputs><input type="%s"></input></inputs><script><block s="doIfElse"><block s="reportIsA"><block var="n"/><l><option>list</option></l></block><script><block s="doReport"><block s="reportMap"><block s="reifyReporter"><autolambda><custom-block s="de-boolean %s"><l></l></custom-block></autolambda><list></list></block><block var="n"/></block></block></script><script><block s="doReport"><block s="reportIfElse"><custom-block s="zero? %n"><block var="n"/></custom-block><l>0</l><block s="reportIfElse"><block s="reportVariadicEquals"><list><block var="n"/><block s="reportBoolean"><l><bool>true</bool></l></block></list></block><l>1</l><block var="n"/></block></block></block></script></block></script></block-definition><block-definition s="zero? %&apos;n&apos;" type="predicate" category="other" helper="true"><comment x="0" y="0" w="202.66666666666666" collapsed="true">reports True iff the input is 0 or False.</comment><header></header><code></code><translations></translations><inputs><input type="%n"></input></inputs><script><block s="doReport"><block s="reportListContainsItem"><block s="reportNewList"><list><l>0</l><block s="reportBoolean"><l><bool>false</bool></l></block></list></block><block var="n"/></block></block></script></block-definition><block-definition s="$crosshairs flatten stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="118.24374999999998" collapsed="false">A variation of FLATTEN STREAM delivering a more balanced distribution of output items among substreams.</comment><header></header><code></code><translations></translations><inputs><input type="%l"></input></inputs><script><block s="doDeclareVariables"><list><l>stream*</l><l>substreams</l><l>insert counter</l></list></block><block s="doSetVar"><l>substreams</l><block s="reportNewList"><list></list></block></block><block s="doSetVar"><l>stream*</l><block var="stream"/></block><custom-block s="let %upvar $arrowLeft %s"><l>add substream if applicable</l><block s="reifyScript"><script><block s="doIf"><block s="reportVariadicAnd"><list><block s="reportVariadicEquals"><list><block var="insert counter"/><l>0</l></list></block><block s="reportNot"><custom-block s="is stream %l empty?"><block var="stream*"/></custom-block></block></list></block><script><block s="doSetVar"><l>substreams</l><block s="reportCONS"><custom-block s="head of stream %l"><block var="stream*"/></custom-block><block var="substreams"/></block></block><block s="doSetVar"><l>stream*</l><custom-block s="tail of stream %l"><block var="stream*"/></custom-block></block><block s="doSetVar"><l>insert counter</l><block s="reportListAttribute"><l><option>length</option></l><block var="substreams"/></block></block></script><list></list></block><block s="doChangeVar"><l>insert counter</l><l>-1</l></block></script><list></list></block></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>remove empty substreams</l><block s="reifyScript"><script><block s="doUntil"><block s="reportVariadicOr"><list><block s="reportListIsEmpty"><block var="substreams"/></block><block s="reportNot"><custom-block s="is stream %l empty?"><block s="reportListItem"><l>1</l><block var="substreams"/></block></custom-block></block></list></block><script><block s="doSetVar"><l>substreams</l><block s="reportCDR"><block var="substreams"/></block></block></script></block></script><list></list></block></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>flatten*</l><block s="reifyScript"><script><block s="doRun"><block var="add substream if applicable"/><list></list></block><block s="doRun"><block var="remove empty substreams"/><list></list></block><block s="doIf"><block s="reportListIsEmpty"><block var="substreams"/></block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list></list></block><block s="doSetVar"><l>substreams</l><custom-block s="round robin %l"><block var="substreams"/></custom-block></block><custom-block s="let %upvar $arrowLeft %s"><l>result</l><custom-block s="head of stream %l"><block s="reportListItem"><l>1</l><block var="substreams"/></block></custom-block></custom-block><block s="doReplaceInList"><l>1</l><block var="substreams"/><custom-block s="tail of stream %l"><block s="reportListItem"><l>1</l><block var="substreams"/></block></custom-block></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block var="result"/><block s="evaluate"><block var="flatten*"/><list></list></block></custom-block></block></script><list></list></block></custom-block><block s="doReport"><block s="evaluate"><block var="flatten*"/><list></list></block></block></script></block-definition><block-definition s="flatmap finite %&apos;function&apos; over stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="293.003125" collapsed="false">Create a stream that is the result of appending (rather tah interleaving) streams mapped over the input stream.&#xD;Will only be applicable if function (input 1) will create *finite* streams.&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%repRing"></input><input type="%l"></input></inputs><script><block s="doReport"><custom-block s="append substreams of %l"><custom-block s="map %repRing over stream(s) %mult%l"><block var="function"/><list><block var="stream"/></list></custom-block></custom-block></block></script><scripts><script x="10" y="115.00000000000001"><custom-block s="$speechBubble %mlt"><l>non-descending integer pairs</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="flatmap finite %repRing over stream %l"><block s="reifyReporter"><autolambda><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><autolambda><block s="reportNewList"><list><block var="#1"/><block var="#2"/></list></block></autolambda><list><l>#1</l></list></block><list><custom-block s="stream with numbers from %n to %n step %n"><l>1</l><block var="#2"/><l>1</l></custom-block></list></custom-block></autolambda><list><l>#2</l></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="round robin %&apos;data&apos;" type="reporter" category="lists"><header></header><code></code><translations></translations><inputs><input type="%l" initial="1"></input></inputs><script><block s="doReport"><custom-block s="%l followed by %s"><block s="reportCDR"><block var="data"/></block><block s="reportListItem"><l>1</l><block var="data"/></block></custom-block></block></script></block-definition><block-definition s="interleave streams %&apos;streams&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="293.70580357142853" collapsed="false">Alternately report items from each stream.&#xD;A generalization of SICP function INTERLEAVE-DELAYED.&#xD;&#xD;For finite lists, the way to make one list combining the items from several input lists is to APPEND them.  But that doesn&apos;t work for possibly infinite streams; if the first stream is infinite, no items from the second or additional input streams would be included.  Instead, you have to INTERLEAVE the streams, take an item from the first one, an item from the second one, and so on.  This ensures that every item of every stream will turn up eventually in the result stream.&#xD;&#xD;This block makes no guarantees regarding the precise order in which items appear in the result stream.&#xD;&#xD;General info in streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%mult%anyUE" initial="2"></input></inputs><script><block s="doReport"><custom-block s="$gears HELPER interleave streams %l"><block var="streams"/></custom-block></block></script><scripts><script x="7.142857142857143" y="239.8571428571429"><custom-block s="$speechBubble %mlt"><l>Simple code for INTERLEAVE STREAMS (a ⋮) (b λ)</l></custom-block><block s="doIf"><custom-block s="is stream %l empty?"><block var="a"/></custom-block><script><block s="doReport"><block s="evaluate"><block var="b"/><list></list></block></block></script><list></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="a"/></custom-block><custom-block s="interleave streams %mult%anyUE"><list><block s="evaluate"><block var="b"/><list></list></block><custom-block s="tail of stream %l"><block var="a"/></custom-block></list></custom-block></custom-block></block></script><script x="7.142857142857143" y="393.7023809523809"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="interleave streams %mult%anyUE"><list><custom-block s="stream %mult%s"><list><l>1</l><l>2</l><l>3</l></list></custom-block><custom-block s="stream with numbers from %n"><l>11</l></custom-block></list></custom-block></custom-block></block></script><script x="7.142857142857143" y="486.01190476190453"><custom-block s="$speechBubble %mlt"><l>An example with several input streams</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="interleave streams %mult%anyUE"><list><custom-block s="the empty stream"></custom-block><custom-block s="stream %mult%s"><list><l>1</l><l>2</l><l>3</l></list></custom-block><custom-block s="stream %mult%s"><list><l>11</l></list></custom-block><custom-block s="stream with numbers from %n"><l>21</l></custom-block></list></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="append substreams of %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%l" initial="1"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block><block s="doReport"><custom-block s="append streams %mult%anyUE"><list><custom-block s="head of stream %l"><block var="stream"/></custom-block><custom-block s="append substreams of %l"><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></list></custom-block></block></script></block-definition><block-definition s="merge streams %&apos;streams&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="160.80000000000024" collapsed="false">Merge 2 streams, in ascending order (as established by “_ &lt; _”).&#xD;&#xD;For the result stream to be in ascending (or non-descending) order, both of the input streams must be.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAMS.</comment><header></header><code></code><translations></translations><inputs><input type="%mult%l" initial="2"></input></inputs><script><block s="doSetVar"><l>streams</l><block s="reportKeep"><block s="reifyPredicate"><autolambda><block s="reportNot"><custom-block s="is stream %l empty?"><l/></custom-block></block></autolambda><list></list></block><block var="streams"/></block></block><block s="doIf"><block s="reportListIsEmpty"><block var="streams"/></block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list><block s="reportListIsEmpty"><block s="reportCDR"><block var="streams"/></block></block><script><block s="doReport"><block s="reportListItem"><l>1</l><block var="streams"/></block></block></script></list></block><custom-block s="let %upvar $arrowLeft %s"><l>keys</l><block s="reportMap"><block s="reifyReporter"><autolambda><custom-block s="head of stream %l"><l/></custom-block></autolambda><list></list></block><block var="streams"/></block></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>kv-pairs</l><custom-block s="$flash sort %l ordering with %predRing"><block s="reportListAttribute"><l><option>columns</option></l><block s="reportNewList"><list><block var="keys"/><block var="streams"/></list></block></block><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><list><block s="reportListItem"><l>1</l><l/></block><block s="reportListItem"><l>1</l><l/></block></list></block></autolambda><list></list></block></custom-block></custom-block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block s="reportListItem"><l>1</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block></block><custom-block s="merge streams %mult%l"><block s="reportCONS"><custom-block s="tail of stream %l"><block s="reportListItem"><l>2</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block></block></custom-block><block s="reportMap"><block s="reifyReporter"><autolambda><block s="reportListItem"><l>2</l><l/></block></autolambda><list></list></block><block s="reportCDR"><block var="kv-pairs"/></block></block></block></custom-block></custom-block></block></script><scripts><script x="20" y="578.8888888888887"><custom-block s="$speechBubble %mlt"><l>Simple code for MERGE STREAMS (a) (b)</l></custom-block><block s="doIf"><block s="reportVariadicOr"><list><custom-block s="is stream %l empty?"><block var="a"/></custom-block><custom-block s="is stream %l empty?"><block var="b"/></custom-block></list></block><script><block s="doReport"><custom-block s="append streams %mult%anyUE"><list><block var="a"/><block var="b"/></list></custom-block></block></script><list></list></block><block s="doIf"><block s="reportVariadicLessThan"><list><custom-block s="head of stream %l"><block var="a"/></custom-block><custom-block s="head of stream %l"><block var="b"/></custom-block></list></block><script><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="a"/></custom-block><custom-block s="merge streams %mult%l"><list><block var="b"/><custom-block s="tail of stream %l"><block var="a"/></custom-block></list></custom-block></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="b"/></custom-block><custom-block s="merge streams %mult%l"><list><block var="a"/><custom-block s="tail of stream %l"><block var="b"/></custom-block></list></custom-block></custom-block></block></script><script x="20" y="833.2777777777782"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="merge streams %mult%l"><list><custom-block s="stream with numbers from %n"><l>5</l></custom-block><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><autolambda><block s="reportVariadicSum"><list><l></l><l></l></list></block></autolambda><list></list></block><list><custom-block s="stream with numbers from %n"><l>1</l></custom-block></list></custom-block></list></custom-block></custom-block></block></script><script x="20" y="974.7222222222226"><custom-block s="$speechBubble %mlt"><l>Advanced version</l></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>original case sensitivity</l><block s="reportGlobalFlag"><l><option>case sensitivity</option></l></block></custom-block><block s="doSetGlobalFlag"><l><option>case sensitivity</option></l><l><bool>true</bool></l></block><custom-block s="let %upvar $arrowLeft %s"><l>result</l><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="merge streams %mult%l %br ordered by %repRing uniques? %b by %predRing"><list><custom-block s="stream %mult%s"><list><l>a</l><l>a</l><l>A</l></list></custom-block><custom-block s="stream %mult%s"><list><l>1</l><l>B</l><l>C</l><l>c</l></list></custom-block><custom-block s="stream %mult%s"><list><l>1</l><l>2</l><l>3</l></list></custom-block></list><block s="reifyReporter"><autolambda><block s="reportTextAttribute"><l><option>lower case</option></l><l></l></block></autolambda><list></list></block><l><bool>true</bool></l><block s="reifyPredicate"><autolambda><block s="reportVariadicEquals"><list><l></l><l></l></list></block></autolambda><list></list></block></custom-block></custom-block></custom-block><block s="doSetGlobalFlag"><l><option>case sensitivity</option></l><block var="original case sensitivity"/></block><block s="doReport"><block var="result"/></block></script></scripts></block-definition><block-definition s="$gears flatten stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="293.003125" collapsed="false">Interleave streams that are themselves elements of a stream, such that they become one stream.&#xD;Does not work on streams whose 1st level items are not (all) streams.&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%l"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="stream"/></block></script><list></list></block><block s="doReport"><custom-block s="interleave streams %mult%anyUE"><list><custom-block s="head of stream %l"><block var="stream"/></custom-block><custom-block s="$gears flatten stream %l"><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></list></custom-block></block></script></block-definition><block-definition s="list %&apos;requested&apos; items of stream %&apos;stream&apos;" type="reporter" category="Streams" space="true"><comment x="0" y="0" w="471.3368303571429" collapsed="false">Reports a list containing a specified number of items from a stream.&#xD;&#xD;Replaces SHOW STREAM from version 1 of this library.&#xD;&#xD;The inputs are an integer and a stream. With a positive integer, LIST ... STREAM reports a regular finite list of length less than (for shorter finite streams) or equal to the integer. It&apos;s useful because an infinite stream can&apos;t be displayed in a finite amount of time.&#xD;&#xD;Alternatively, ”all” (or “Infinity”) may be used as first input, for the showing to continue until the end of the stream will have been reached. Better not try this with infinite streams: the process will never terminate.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%n" initial="1">10<options>all=Infinity</options></input><input type="%l" initial="1"></input></inputs><script><custom-block s="let %upvar $arrowLeft %s"><l>items</l><block s="reportNewList"><list></list></block></custom-block><block s="doUntil"><block s="reportVariadicOr"><list><block s="reportVariadicLessThan"><list><block var="requested"/><l>1.5</l></list></block><custom-block s="is stream %l empty?"><block var="stream"/></custom-block></list></block><script><block s="doAddToList"><custom-block s="head of stream %l"><block var="stream"/></custom-block><block var="items"/></block><block s="doChangeVar"><l>requested</l><l>-1</l></block><block s="doSetVar"><l>stream</l><custom-block s="tail of stream %l"><block var="stream"/></custom-block></block></script></block><block s="doIf"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doReport"><block var="items"/></block></script><list></list></block><block s="doReport"><custom-block s="%l followed by %s"><block var="items"/><custom-block s="head of stream %l"><block var="stream"/></custom-block></custom-block></block></script><scripts><script x="20" y="353"><custom-block s="comment %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></block></script><script x="20" y="421"><custom-block s="comment %mlt"><l>Demo: the number of items requested is exactly the length of the stream</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="stream %mult%s"><block s="reportNumbers"><l>1</l><l>10</l></block></custom-block></custom-block></block></script><script x="20" y="503.8333333333332"><custom-block s="comment %mlt"><l>Demo: the length of a *finite* stream is less than &#xD;the number of items requested.</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="stream %mult%s"><block s="reportNumbers"><l>1</l><l>5</l></block></custom-block></custom-block></block></script><script x="20" y="598.6666666666669"><custom-block s="comment %mlt"><l>Demo: the length of an *infinite* stream is less than &#xD;the number of items requested. The process will not terminate.</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items %predRing from stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><list><l></l><l>6</l></list></block></autolambda><list></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script><script x="20" y="713.5"><custom-block s="comment %mlt"><l>Advanced version, enabling continuation.</l></custom-block><custom-block s="ignore %s"><custom-block s="list %n items with %upvar of stream %l"><l>10</l><l>continuation</l><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block><custom-block s="ignore %s"><custom-block s="list %n items with %upvar of stream %l"><l>10</l><l>continuation*</l><block s="evaluate"><block var="continuation"/><list></list></block></custom-block></custom-block><block s="doReport"><custom-block s="list %n items with %upvar of stream %l"><l>5</l><l>continuation</l><block s="evaluate"><block var="continuation*"/><list></list></block></custom-block></block></script></scripts></block-definition><block-definition s="merge streams %&apos;streams&apos; $nl ordered by %&apos;key function&apos; uniques? %&apos;uniques&apos; by %&apos;distinguisher&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="406.8000000000002" collapsed="false">Merge any nunber of streams, ordered by key (ascending)&#xD;&#xD;INPUT&#xD;1. streams to be merged. For the algorithm to work, each of the streams must be pre-ordered by the same key function.&#xD;2. a reporter (“key function”) assigning a key to be sorted by, to each input stream item&#xD;3. switch indicating whether output items should be unique, as compared to previous items.&#xD;4. ”distinguisher”, a two-iitem predicate indicating whether one item is considered unique as compared to another item (default: “_ = _”).&#xD;RESULT&#xD;A stream of items from the input streams, ordered by the same key function, and possibly filtered for uniqueness.&#xD;REMARK &#xD;Keys are sorted in ascending order as established by “_ &lt; _”.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAMS.</comment><header></header><code></code><translations></translations><inputs><input type="%mult%l" initial="2"></input><input type="%repRing" initial="1"></input><input type="%b" initial="1">true</input><input type="%predRing" initial="1"></input></inputs><script><block s="doDeclareVariables"><list><l>head</l><l>key</l><l>pre-key</l><l>local history</l></list></block><block s="doUntil"><block s="reportVariadicOr"><list><block s="reportListIsEmpty"><block var="streams"/></block><block s="reportNot"><custom-block s="is stream %l empty?"><block s="reportListItem"><l>1</l><block var="streams"/></block></custom-block></block></list></block><script><block s="doSetVar"><l>streams</l><block s="reportCDR"><block var="streams"/></block></block></script></block><block s="doIf"><block s="reportListIsEmpty"><block var="streams"/></block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list><block s="reportVariadicAnd"><list><block s="reportListIsEmpty"><block s="reportCDR"><block var="streams"/></block></block><block s="reportNot"><block var="uniques"/></block></list></block><script><block s="doReport"><block s="reportListItem"><l>1</l><block var="streams"/></block></block></script></list></block><block s="doIf"><block s="reportVariadicEquals"><list><block var="distinguisher"/><l></l></list></block><script><block s="doSetVar"><l>distinguisher</l><block s="reifyPredicate"><autolambda><block s="reportVariadicEquals"><list><l></l><l></l></list></block></autolambda><list></list></block></block></script><list></list></block><custom-block s="let %upvar $arrowLeft %s"><l>keys</l><block s="reportMap"><block s="reifyReporter"><autolambda><block s="evaluate"><block var="key function"/><list><custom-block s="head of stream %l"><l/></custom-block></list></block></autolambda><list></list></block><block var="streams"/></block></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>kv-pairs</l><custom-block s="$flash sort %l ordering with %predRing"><block s="reportListAttribute"><l><option>columns</option></l><block s="reportNewList"><list><block var="keys"/><block var="streams"/></list></block></block><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><list><block s="reportListItem"><l>1</l><l/></block><block s="reportListItem"><l>1</l><l/></block></list></block></autolambda><list></list></block></custom-block></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>merge*</l><block s="reifyScript"><script><block s="doSetVar"><l>pre-key</l><block s="reportListItem"><l>1</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block></block></block><block s="doIf"><custom-block s="is stream %l empty?"><block s="reportListItem"><l>2</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block></block></custom-block><script><block s="doSetVar"><l>kv-pairs</l><block s="reportCDR"><block var="kv-pairs"/></block></block><block s="doIf"><block s="reportListIsEmpty"><block var="kv-pairs"/></block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list><block s="reportVariadicAnd"><list><block s="reportListIsEmpty"><block s="reportCDR"><block var="kv-pairs"/></block></block><block s="reportNot"><block var="uniques"/></block></list></block><script><block s="doReport"><block s="reportListItem"><l>2</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block></block></block></script></list></block></script><list></list></block><block s="doReplaceInList"><l>1</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block><block s="evaluate"><block var="key function"/><list><custom-block s="head of stream %l"><block s="reportListItem"><l>2</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block></block></custom-block></list></block></block><block s="doSetVar"><l>kv-pairs</l><custom-block s="$flash sort %l ordering with %predRing"><block var="kv-pairs"/><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThan"><list><block s="reportListItem"><l>1</l><l/></block><block s="reportListItem"><l>1</l><l/></block></list></block></autolambda><list></list></block></custom-block></block><block s="doSetVar"><l>head</l><custom-block s="head of stream %l"><block s="reportListItem"><l>2</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block></block></custom-block></block><block s="doSetVar"><l>key</l><block s="reportListItem"><l>1</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block></block></block><block s="doReplaceInList"><l>2</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block><custom-block s="tail of stream %l"><block s="reportListItem"><l>2</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block></block></custom-block></block><block s="doIf"><block s="reportVariadicAnd"><list><block var="uniques"/><block s="reportVariadicEquals"><list><block var="key"/><block var="pre-key"/></list></block></list></block><script><block s="doIf"><block s="reportVariadicEquals"><list><block s="reportFindFirst"><block s="reifyPredicate"><autolambda><block s="evaluate"><block var="distinguisher"/><list><block var="head"/><l></l></list></block></autolambda><list></list></block><block var="local history"/></block><l></l></list></block><script><block s="doAddToList"><block var="head"/><block var="local history"/></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block var="head"/><block s="evaluate"><block var="merge*"/><list></list></block></custom-block></block></script><list></list></block><block s="doReport"><block s="evaluate"><block var="merge*"/><list></list></block></block></script><list></list></block><block s="doSetVar"><l>local history</l><block s="reportNewList"><list><block var="head"/></list></block></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block var="head"/><block s="evaluate"><block var="merge*"/><list></list></block></custom-block></block></script><list></list></block></custom-block><block s="doSetVar"><l>head</l><custom-block s="head of stream %l"><block s="reportListItem"><l>2</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block></block></custom-block></block><block s="doSetVar"><l>local history</l><block s="reportNewList"><list><block var="head"/></list></block></block><block s="doReplaceInList"><l>2</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block><custom-block s="tail of stream %l"><block s="reportListItem"><l>2</l><block s="reportListItem"><l>1</l><block var="kv-pairs"/></block></block></custom-block></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block var="head"/><block s="evaluate"><block var="merge*"/><list></list></block></custom-block></block></script><scripts><script x="7.142857142857143" y="1443.5000000000002"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>original case sensitivity</l><block s="reportGlobalFlag"><l><option>case sensitivity</option></l></block></custom-block><block s="doSetGlobalFlag"><l><option>case sensitivity</option></l><l><bool>true</bool></l></block><custom-block s="let %upvar $arrowLeft %s"><l>result</l><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="merge streams %mult%l %br ordered by %repRing uniques? %b by %predRing"><list><custom-block s="stream %mult%s"><list><l>a</l><l>a</l><l>A</l></list></custom-block><custom-block s="stream %mult%s"><list><l>1</l><l>B</l><l>C</l><l>c</l></list></custom-block><custom-block s="stream %mult%s"><list><l>1</l><l>2</l><l>3</l></list></custom-block></list><block s="reifyReporter"><autolambda><block s="reportTextAttribute"><l><option>lower case</option></l><l></l></block></autolambda><list></list></block><l><bool>true</bool></l><block s="reifyPredicate"><autolambda><block s="reportVariadicEquals"><list><l></l><l></l></list></block></autolambda><list></list></block></custom-block></custom-block></custom-block><block s="doSetGlobalFlag"><l><option>case sensitivity</option></l><block var="original case sensitivity"/></block><block s="doReport"><block var="result"/></block></script><script x="7.142857142857143" y="1668.7142857142883"><custom-block s="head of stream %l"><l/></custom-block></script><script x="7.142857142857143" y="1694.1428571428594"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="merge streams %mult%l %br ordered by %repRing uniques? %b by %predRing"><list><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicSum"><list><l></l><l>10</l></list></block></autolambda><list></list></block><l>#</l><list><l>1</l></list></custom-block><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicSum"><list><l></l><l>10</l></list></block></autolambda><list></list></block><l>#</l><list><l>3</l></list></custom-block><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicSum"><list><l></l><l>10</l></list></block></autolambda><list></list></block><l>#</l><list><l>2</l></list></custom-block></list><block s="reifyReporter"><script></script><list></list></block><l/><block s="reifyPredicate"><script></script><list></list></block></custom-block></custom-block></block></script><script x="7.142857142857143" y="1866.7380952381016"><custom-block s="$speechBubble %mlt"><l>Demo of a related (hidden) block, that will keep any items from the 1st stream&#xD;that also appear in the 2nd (AND relation)</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items from stream %l %br AND stream %l %br ordered by key %repRing"><custom-block s="stream with numbers from %n"><l>1</l></custom-block><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><block var="#"/><l>2.5</l></list></block></autolambda><list></list></block><l>#</l><list></list></custom-block><block s="reifyReporter"><script></script><list></list></block></custom-block></custom-block></block></script><script x="7.142857142857143" y="2015.071428571436"><custom-block s="$speechBubble %mlt"><l>Demo of a related (hidden) block, that will keep any items from either of 2 streams (OR relation).&#xD;Items apprearing in both streams will appear in the output only once.</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items from stream %l %br OR stream %l %br ordered by key %repRing"><custom-block s="stream with numbers from %n"><l>1</l></custom-block><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><block var="#"/><l>2.5</l></list></block></autolambda><list></list></block><l>#</l><list></list></custom-block><block s="reifyReporter"><script></script><list></list></block></custom-block></custom-block></block></script><script x="7.142857142857143" y="2165.5238095238187"><custom-block s="$speechBubble %mlt"><l>Demo of a related block, that will keep any iems appearing in either of 2 streams,&#xD;but not in both (eXclusive OR relation)</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items from stream %l %br XOR stream %l %br ordered by key %repRing"><custom-block s="stream with numbers from %n"><l>1</l></custom-block><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><block var="#"/><l>2.5</l></list></block></autolambda><list></list></block><l>#</l><list></list></custom-block><block s="reifyReporter"><script></script><list></list></block></custom-block></custom-block></block></script><script x="7.142857142857143" y="2313.8571428571536"><custom-block s="$speechBubble %mlt"><l>Demo of a related (hidden) block, keeping any items from the first stream&#xD;that do NOT appear in the second.</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items from stream %l %br but NOT stream %l %br ordered by key %repRing"><custom-block s="stream with numbers from %n"><l>1</l></custom-block><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><block var="#"/><l>2.5</l></list></block></autolambda><list></list></block><l>#</l><list></list></custom-block><block s="reifyReporter"><script></script><list></list></block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="keep items from stream %&apos;a&apos; $nl AND stream %&apos;b&apos; $nl ordered by key %&apos;key function&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%l" initial="1"></input><input type="%l" initial="1"></input><input type="%repRing" initial="1"></input></inputs><script><block s="doIf"><block s="reportVariadicOr"><list><custom-block s="is stream %l empty?"><block var="a"/></custom-block><custom-block s="is stream %l empty?"><block var="b"/></custom-block></list></block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list></list></block><block s="doUntil"><block s="reportVariadicEquals"><list><custom-block s="%upvar $arrowLeft %s"><l>key a</l><block s="evaluate"><block var="key function"/><list><custom-block s="head of stream %l"><block var="a"/></custom-block></list></block></custom-block><custom-block s="%upvar $arrowLeft %s"><l>key b</l><block s="evaluate"><block var="key function"/><list><custom-block s="head of stream %l"><block var="b"/></custom-block></list></block></custom-block></list></block><script><block s="doIfElse"><block s="reportVariadicLessThan"><list><block var="key a"/><block var="key b"/></list></block><script><block s="doSetVar"><l>a</l><custom-block s="tail of stream %l"><block var="a"/></custom-block></block><block s="doIf"><custom-block s="is stream %l empty?"><block var="a"/></custom-block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list></list></block></script><script><block s="doSetVar"><l>b</l><custom-block s="tail of stream %l"><block var="b"/></custom-block></block><block s="doIf"><custom-block s="is stream %l empty?"><block var="b"/></custom-block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list></list></block></script></block></script></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="a"/></custom-block><custom-block s="keep items from stream %l %br AND stream %l %br ordered by key %repRing"><custom-block s="tail of stream %l"><block var="a"/></custom-block><custom-block s="tail of stream %l"><block var="b"/></custom-block><block var="key function"/></custom-block></custom-block></block></script><scripts><script x="10" y="557.0833333333333"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items from stream %l %br AND stream %l %br ordered by key %repRing"><custom-block s="stream with numbers from %n"><l>1</l></custom-block><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><block var="#"/><l>2.5</l></list></block></autolambda><list></list></block><l>#</l><list></list></custom-block><block s="reifyReporter"><script></script><list></list></block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="keep items from stream %&apos;a&apos; $nl OR stream %&apos;b&apos; $nl ordered by key %&apos;key function&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%l" initial="1"></input><input type="%l" initial="1"></input><input type="%repRing" initial="1"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="a"/></custom-block><script><block s="doReport"><block var="b"/></block></script><list><custom-block s="is stream %l empty?"><block var="b"/></custom-block><script><block s="doReport"><block var="a"/></block></script></list></block><block s="doIf"><block s="reportVariadicEquals"><list><custom-block s="%upvar $arrowLeft %s"><l>key a</l><block s="evaluate"><block var="key function"/><list><custom-block s="head of stream %l"><block var="a"/></custom-block></list></block></custom-block><custom-block s="%upvar $arrowLeft %s"><l>key b</l><block s="evaluate"><block var="key function"/><list><custom-block s="head of stream %l"><block var="b"/></custom-block></list></block></custom-block></list></block><script><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="a"/></custom-block><custom-block s="keep items from stream %l %br OR stream %l %br ordered by key %repRing"><custom-block s="tail of stream %l"><block var="a"/></custom-block><custom-block s="tail of stream %l"><block var="b"/></custom-block><block var="key function"/></custom-block></custom-block></block></script><list></list></block><block s="doIf"><block s="reportVariadicLessThan"><list><block var="key a"/><block var="key b"/></list></block><script><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="a"/></custom-block><custom-block s="keep items from stream %l %br OR stream %l %br ordered by key %repRing"><custom-block s="tail of stream %l"><block var="a"/></custom-block><block var="b"/><block var="key function"/></custom-block></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="b"/></custom-block><custom-block s="keep items from stream %l %br OR stream %l %br ordered by key %repRing"><block var="a"/><custom-block s="tail of stream %l"><block var="b"/></custom-block><block var="key function"/></custom-block></custom-block></block></script><scripts><script x="10" y="581.8333333333335"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items from stream %l %br OR stream %l %br ordered by key %repRing"><custom-block s="stream with numbers from %n"><l>1</l></custom-block><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><block var="#"/><l>2.5</l></list></block></autolambda><list></list></block><l>#</l><list></list></custom-block><block s="reifyReporter"><script></script><list></list></block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="item %&apos;index&apos; of stream %&apos;stream&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="300.8" collapsed="false">Report a specific item from a stream. (i.e. stream in, item out)&#xD;The inputs are a positive integer (item number), and the stream.&#xD;&#xD;The equivalent of SICP function STREAM-REF.&#xD;&#xD;Note that looking for something in a stream by index isn&apos;t a very &quot;streamly&quot; style of work.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM</comment><header></header><code></code><translations></translations><inputs><input type="%n">1</input><input type="%l"></input></inputs><script><block s="doIf"><block s="reportVariadicLessThan"><list><block var="index"/><l>0.5</l></list></block><script><block s="doReport"><l></l></block></script><list></list></block><block s="doUntil"><block s="reportVariadicOr"><list><block s="reportVariadicLessThan"><list><block var="index"/><l>1.5</l></list></block><custom-block s="is stream %l empty?"><block var="stream"/></custom-block></list></block><script><block s="doChangeVar"><l>index</l><l>-1</l></block><block s="doSetVar"><l>stream</l><custom-block s="tail of stream %l"><block var="stream"/></custom-block></block></script></block><block s="doReport"><custom-block s="head of stream %l"><block var="stream"/></custom-block></block></script><scripts><script x="7.14285714285711" y="235.72619047619074"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="item %n of stream %l"><l>5</l><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><l></l><l></l></list></block></autolambda><list></list></block><list><custom-block s="stream with numbers from %n"><l>11</l></custom-block></list></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="$flash sort %&apos;data&apos; ordering with %&apos;function&apos;" type="reporter" category="lists"><comment x="0" y="0" w="161.14285714285708" collapsed="false">Reports a sorted version of the list in its first input slot, using the comparison function in the second input slot.  For a list of numbers, using &lt; as the comparison function will sort from low to high; using &gt; will sort from high to low.</comment><header></header><code></code><translations>ca:ordena _ segons criteri _&#xD;</translations><inputs><input type="%l"></input><input type="%predRing"></input></inputs><script><block s="doReport"><block s="reportApplyExtension"><l>lst_sort(list, fn)</l><list><block var="data"/><block var="function"/></list></block></block></script><scripts><script x="11.999999999999998" y="147.55555555555554"><block s="doDeclareVariables"><list><l>even items</l><l>odd items</l><l>merge</l><l>split</l><l>copy of data</l><l>id</l></list></block><block s="doSetVar"><l>id</l><block s="reifyScript"><script><block s="doReport"><l></l></block></script><list></list></block></block><block s="doSetVar"><l>copy of data</l><block s="reportMap"><block var="id"/><block var="data"/></block></block><block s="doSetVar"><l>split</l><block s="reifyScript"><script><block s="doSetVar"><l>even items</l><block s="reportNewList"><list></list></block></block><block s="doSetVar"><l>odd items</l><block s="reportNewList"><list></list></block></block><block s="doUntil"><block s="reportListIsEmpty"><block var="copy of data"/></block><script><block s="doAddToList"><block s="reportListItem"><l>1</l><block var="copy of data"/></block><block var="odd items"/></block><block s="doDeleteFromList"><l>1</l><block var="copy of data"/></block><block s="doIf"><block s="reportNot"><block s="reportListIsEmpty"><block var="copy of data"/></block></block><script><block s="doAddToList"><block s="reportListItem"><l>1</l><block var="copy of data"/></block><block var="even items"/></block><block s="doDeleteFromList"><l>1</l><block var="copy of data"/></block></script><list></list></block></script></block></script><list></list></block></block><block s="doSetVar"><l>merge</l><block s="reifyScript"><script><block s="doIf"><block s="reportVariadicEquals"><list><block var="#1"/><block s="reportNewList"><list></list></block></list></block><script><block s="doReport"><block var="#2"/></block></script><list></list></block><block s="doIf"><block s="reportVariadicEquals"><list><block var="#2"/><block s="reportNewList"><list></list></block></list></block><script><block s="doReport"><block var="#1"/></block></script><list></list></block><block s="doIfElse"><block s="evaluate"><block var="function"/><list><block s="reportListItem"><l>1</l><block var="#1"/></block><block s="reportListItem"><l>1</l><block var="#2"/></block></list></block><script><block s="doReport"><block s="reportCONS"><block s="reportListItem"><l>1</l><block var="#1"/></block><block s="evaluate"><block var="merge"/><list><block s="reportCDR"><block var="#1"/></block><block var="#2"/></list></block></block></block></script><script><block s="doReport"><block s="reportCONS"><block s="reportListItem"><l>1</l><block var="#2"/></block><block s="evaluate"><block var="merge"/><list><block var="#1"/><block s="reportCDR"><block var="#2"/></block></list></block></block></block></script></block></script><list><l>#1</l><l>#2</l></list></block></block><block s="doIf"><block s="reportVariadicEquals"><list><block var="data"/><block s="reportNewList"><list></list></block></list></block><script><block s="doReport"><block s="reportNewList"><list></list></block></block></script><list></list></block><block s="doIf"><block s="reportVariadicEquals"><list><block s="reportCDR"><block var="data"/></block><block s="reportNewList"><list></list></block></list></block><script><block s="doReport"><block var="data"/></block></script><list></list></block><block s="doRun"><block var="split"/><list></list></block><block s="doReport"><block s="evaluate"><block var="merge"/><list><custom-block s="$flash sort %l ordering with %predRing"><block var="odd items"/><block var="function"/></custom-block><custom-block s="$flash sort %l ordering with %predRing"><block var="even items"/><block var="function"/></custom-block></list></block></block></script></scripts></block-definition><block-definition s="keep items from stream %&apos;a&apos; $nl XOR stream %&apos;b&apos; $nl ordered by key %&apos;key function&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%l" initial="1"></input><input type="%l" initial="1"></input><input type="%repRing" initial="1"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="a"/></custom-block><script><block s="doReport"><block var="b"/></block></script><list><custom-block s="is stream %l empty?"><block var="b"/></custom-block><script><block s="doReport"><block var="a"/></block></script></list></block><block s="doUntil"><block s="reportVariadicNotEquals"><list><custom-block s="%upvar $arrowLeft %s"><l>key a</l><block s="evaluate"><block var="key function"/><list><custom-block s="head of stream %l"><block var="a"/></custom-block></list></block></custom-block><custom-block s="%upvar $arrowLeft %s"><l>key b</l><block s="evaluate"><block var="key function"/><list><custom-block s="head of stream %l"><block var="b"/></custom-block></list></block></custom-block></list></block><script><block s="doSetVar"><l>a</l><custom-block s="tail of stream %l"><block var="a"/></custom-block></block><block s="doIf"><custom-block s="is stream %l empty?"><block var="a"/></custom-block><script><block s="doReport"><block var="b"/></block></script><list></list></block><block s="doSetVar"><l>b</l><custom-block s="tail of stream %l"><block var="b"/></custom-block></block><block s="doIf"><custom-block s="is stream %l empty?"><block var="b"/></custom-block><script><block s="doReport"><block var="a"/></block></script><list></list></block></script></block><block s="doIf"><block s="reportVariadicLessThan"><list><block var="key a"/><block var="key b"/></list></block><script><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="a"/></custom-block><custom-block s="keep items from stream %l %br XOR stream %l %br ordered by key %repRing"><custom-block s="tail of stream %l"><block var="a"/></custom-block><block var="b"/><block var="key function"/></custom-block></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="b"/></custom-block><custom-block s="keep items from stream %l %br XOR stream %l %br ordered by key %repRing"><block var="a"/><custom-block s="tail of stream %l"><block var="b"/></custom-block><block var="key function"/></custom-block></custom-block></block></script><scripts><script x="10" y="667.2500000000002"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items from stream %l %br XOR stream %l %br ordered by key %repRing"><custom-block s="stream with numbers from %n"><l>1</l></custom-block><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><block var="#"/><l>2.5</l></list></block></autolambda><list></list></block><l>#</l><list></list></custom-block><block s="reifyReporter"><script></script><list></list></block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="keep items from stream %&apos;a&apos; $nl but NOT stream %&apos;b&apos; $nl ordered by key %&apos;key function&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%l" initial="1"></input><input type="%l" initial="1"></input><input type="%repRing" initial="1"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="a"/></custom-block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list><custom-block s="is stream %l empty?"><block var="b"/></custom-block><script><block s="doReport"><block var="a"/></block></script></list></block><block s="doUntil"><block s="reportVariadicLessThan"><list><custom-block s="%upvar $arrowLeft %s"><l>key a</l><block s="evaluate"><block var="key function"/><list><custom-block s="head of stream %l"><block var="a"/></custom-block></list></block></custom-block><custom-block s="%upvar $arrowLeft %s"><l>key b</l><block s="evaluate"><block var="key function"/><list><custom-block s="head of stream %l"><block var="b"/></custom-block></list></block></custom-block></list></block><script><block s="doIfElse"><block s="reportVariadicEquals"><list><block var="key a"/><block var="key b"/></list></block><script><block s="doSetVar"><l>a</l><custom-block s="tail of stream %l"><block var="a"/></custom-block></block><block s="doIf"><custom-block s="is stream %l empty?"><block var="a"/></custom-block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list></list></block><block s="doSetVar"><l>b</l><custom-block s="tail of stream %l"><block var="b"/></custom-block></block><block s="doIf"><custom-block s="is stream %l empty?"><block var="b"/></custom-block><script><block s="doReport"><block var="a"/></block></script><list></list></block></script><script><block s="doSetVar"><l>b</l><custom-block s="tail of stream %l"><block var="b"/></custom-block></block><block s="doIf"><custom-block s="is stream %l empty?"><block var="b"/></custom-block><script><block s="doReport"><block var="a"/></block></script><list></list></block></script></block></script></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="a"/></custom-block><custom-block s="keep items from stream %l %br but NOT stream %l %br ordered by key %repRing"><custom-block s="tail of stream %l"><block var="a"/></custom-block><block var="b"/><block var="key function"/></custom-block></custom-block></block></script><scripts><script x="7.142857142857143" y="670.2499999999997"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items from stream %l %br but NOT stream %l %br ordered by key %repRing"><custom-block s="stream with numbers from %n"><l>1</l></custom-block><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><block var="#"/><l>2.5</l></list></block></autolambda><list></list></block><l>#</l><list></list></custom-block><block s="reifyReporter"><script></script><list></list></block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="log stream %&apos;stream&apos; $nl to list %&apos;report&apos; labeled %&apos;label&apos; indexed? %&apos;indexed&apos;" type="reporter" category="Streams" space="true"><comment w="364.4000000000001" collapsed="false">Eavesdrop on a stream in action.&#xD;&#xD;For debugging purposes only! The log will consume a lot of memory.&#xD;&#xD;INPUTS:&#xD;1. the stream to be inspected&#xD;2. the list to be used as log (put it in a variable watcher to see changes happen)&#xD;3. a label for these log entries (optional: not used if this slot is left empty)&#xD;4. whether each entry into the log will be indexed (default: FALSE)&#xD;&#xD;Reports the input stream, so that it can be inserted in a composition of functions.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%l"></input><input type="%l"></input><input type="%txt"></input><input type="%b">false</input></inputs><script><custom-block s="let %upvar $arrowLeft %s"><l>index</l><l>0</l></custom-block><block s="doIf"><custom-block s="is %s empty?"><block var="label"/></custom-block><script><block s="doIf"><block var="indexed"/><script><block s="doReport"><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><script><block s="doChangeVar"><l>index</l><l>1</l></block><block s="doAddToList"><block s="reportNewList"><list><block var="index"/><l></l></list></block><block var="report"/></block><block s="doReport"><l></l></block></script><list></list></block><list><block var="stream"/></list></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><script><block s="doAddToList"><l></l><block var="report"/></block><block s="doReport"><l></l></block></script><list></list></block><list><block var="stream"/></list></custom-block></block></script><list></list></block><block s="doIf"><block var="indexed"/><script><block s="doReport"><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><script><block s="doChangeVar"><l>index</l><l>1</l></block><block s="doAddToList"><block s="reportNewList"><list><block var="label"/><block var="index"/><l></l></list></block><block var="report"/></block><block s="doReport"><l></l></block></script><list></list></block><list><block var="stream"/></list></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><script><block s="doAddToList"><block s="reportNewList"><list><block var="label"/><l></l></list></block><block var="report"/></block><block s="doReport"><l></l></block></script><list></list></block><list><block var="stream"/></list></custom-block></block></script><scripts><script x="10" y="573.9166666666665"><custom-block s="$speechBubble %mlt"><l>Demo: streams before and after KEEP</l></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>log</l><block s="reportNewList"><list></list></block></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>selection</l><custom-block s="list %n items of stream %l"><l>5</l><custom-block s="keep items %predRing from stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicEquals"><list><block s="reportModulus"><l></l><l>2</l></block><l>0</l></list></block></autolambda><list></list></block><custom-block s="log stream %l %br to list %l labeled %txt indexed? %b"><custom-block s="stream with numbers from %n"><l>1</l></custom-block><block var="log"/><l></l><l><bool>false</bool></l></custom-block></custom-block></custom-block></custom-block><block s="doReport"><block s="reportNewList"><list><block s="reportCONS"><l>BEFORE:</l><block var="log"/></block><block s="reportCONS"><l>AFTER</l><block var="selection"/></block></list></block></block></script><script x="10" y="762.4166666666665"><custom-block s="$speechBubble %mlt"><l>Demo, with label and index</l></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>log</l><block s="reportNewList"><list></list></block></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>selection</l><custom-block s="list %n items of stream %l"><l>5</l><custom-block s="keep items %predRing from stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicEquals"><list><block s="reportModulus"><l></l><l>2</l></block><l>0</l></list></block></autolambda><list></list></block><custom-block s="log stream %l %br to list %l labeled %txt indexed? %b"><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><autolambda><custom-block s="square %n"><l></l></custom-block></autolambda><list></list></block><list><custom-block s="stream with numbers from %n"><l>1</l></custom-block></list></custom-block><block var="log"/><l>squares</l><l><bool>true</bool></l></custom-block></custom-block></custom-block></custom-block><block s="doReport"><block s="reportCONS"><block s="reportNewList"><list><l>LABEL:</l><l>INDEX:</l><l>VALUE:</l></list></block><block var="log"/></block></block></script></scripts></block-definition><block-definition s="is %&apos;text&apos; empty?" type="predicate" category="operators"><header></header><code></code><translations>de:ist _ leer?&#xD;</translations><inputs><input type="%s">word</input></inputs><script><block s="doReport"><block s="reportVariadicEquals"><list><block var="text"/><l></l></list></block></block></script></block-definition><block-definition s="segment of stream %&apos;stream&apos; $nl starting with first item that %&apos;start condition&apos; $nl ending with next item that %&apos;end condition&apos; inclusive? %&apos;include&apos;" type="reporter" category="Streams"><comment x="0" y="0" w="415.8857142857144" collapsed="false">Reports a segment (a contiguous subset) of the input stream, based on given starting and ending conditions.  One use of this block is to select a finite subset of a potentially infinite stream, which might be necessary to avoid an infinite recursion.&#xD;&#xD;INPUTS:&#xD;1. input stream;&#xD;2. start condition;&#xD;3. end condition;&#xD;4. whether to include the first item satisfying the end condition (default = FALSE)&#xD;&#xD;SPECIFYING THE START AND END CONDITIONS&#xD;The two conditions are predicate functions of two inputs, namely, an item from the stream and that item&apos;s index (position in the stream).  In the start condition, the index is with respect to the input stream; in the end condition, though, the index is taken with respect to the /result/ stream.  If the start condition is empty, the resulting segment starts at the beginning of the input stream.  If the end condition is empty, the resulting segment will reach to the end of the input stream, or will be infinite if the input is infinite.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs><input type="%l"></input><input type="%predRing" initial="1"></input><input type="%predRing"></input><input type="%b" initial="1">false</input></inputs><script><block s="doIf"><block s="reportVariadicEquals"><list><block var="end condition"/><block s="reifyPredicate"><script></script><list></list></block></list></block><script><block s="doSetVar"><l>end condition</l><block s="reifyPredicate"><autolambda><block s="reportBoolean"><l><bool>false</bool></l></block></autolambda><list></list></block></block></script><list></list></block><block s="doReport"><custom-block s="$gears segment of stream %l once %predRing until %predRing inclusive? %b index %s"><block var="stream"/><block var="start condition"/><block var="end condition"/><block var="include"/><l>1</l></custom-block></block></script><scripts><script x="7.142857142857143" y="275.8571428571429"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>Infinity</l><custom-block s="segment of stream %l %br starting with first item that %predRing %br ending with next item that %predRing inclusive? %b"><custom-block s="stream with numbers from %n"><l>12</l></custom-block><block s="reifyPredicate"><autolambda><block s="reportVariadicGreaterThan"><list><l></l><l>15</l></list></block></autolambda><list></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicGreaterThan"><list><block var="index"/><l>10</l></list></block></autolambda><list><l>value</l><l>index</l></list></block><l><bool>false</bool></l></custom-block></custom-block></block></script><script x="7.142857142857143" y="426.21428571428527"><custom-block s="$speechBubble %mlt"><l>Demo: (3, 4, 5)</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="segment of stream %l %br starting with first item that %predRing %br ending with next item that %predRing inclusive? %b"><custom-block s="stream with numbers from %n"><l>3</l></custom-block><block s="reifyPredicate"><script></script><list></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicGreaterThan"><list><l></l><l>5</l></list></block></autolambda><list></list></block><l><bool>false</bool></l></custom-block></custom-block></block></script><script x="7.142857142857143" y="547.3571428571421"><custom-block s="$speechBubble %mlt"><l>By contrast, a version of the above with KEEP&#xD;will not terminate (use red button to stop manually).</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items %predRing from stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicLessThanOrEquals"><list><l></l><l>5</l></list></block></autolambda><list></list></block><custom-block s="stream with numbers from %n"><l>3</l></custom-block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="stream demo" type="command" category="Streams" space="true"><comment x="0" y="0" w="159.66666666666674" collapsed="false">Read the code while running it.&#xD;&#xD;General info on streams: read the help text of TAIL OF STREAM.</comment><header></header><code></code><translations></translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>ones</l><l>ints</l><l>primes</l><l>rationals</l><l>hanoi</l></list></block><block s="bubble"><l>Press ▶ after each demonstration … and now, to continue.</l></block><block s="doPauseAll"></block><block s="doSetVar"><l>ones</l><custom-block s="%s in front of stream %anyUE"><l>1</l><block var="ones"/></custom-block></block><custom-block s="$gears show demo %txt %s %n"><l>An infinite stream of ones:</l><block var="ones"/><l>6</l></custom-block><block s="doSetVar"><l>ints</l><custom-block s="%s in front of stream %anyUE"><l>1</l><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><autolambda><block s="reportVariadicSum"><list><l></l><l></l></list></block></autolambda><list></list></block><list><block var="ones"/><block var="ints"/></list></custom-block></custom-block></block><custom-block s="$gears show demo %txt %s %n"><l>A stream containing all the positive integers:</l><block var="ints"/><l>9</l></custom-block><block s="doSetVar"><l>primes</l><custom-block s="sieve %l"><custom-block s="stream with numbers from %n"><l>2</l></custom-block></custom-block></block><custom-block s="$gears show demo %txt %s %n"><l>A stream containing all the prime numbers:</l><block var="primes"/><l>12</l></custom-block><block s="doSetVar"><l>rationals</l><custom-block s="%s in front of stream %anyUE"><l>0</l><custom-block s="$crosshairs flatmap %repRing over stream %l"><block s="reifyReporter"><autolambda><custom-block s="map %repRing over keep %predRing from map %repRing over stream %l"><block s="reifyReporter"><autolambda><block s="reportJoinWords"><list><l></l><l>/</l><block var="denominator"/></list></block></autolambda><list></list></block><block s="reifyPredicate"><autolambda><block s="reportVariadicEquals"><list><custom-block s="GCD (or) %n $∨-1.2-255-255-0 %n"><l></l><block var="denominator"/></custom-block><l>1</l></list></block></autolambda><list></list></block><block s="reifyReporter"><script></script><list></list></block><custom-block s="stream with numbers from %n"><block var="denominator"/></custom-block></custom-block></autolambda><list><l>denominator</l></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block><custom-block s="$gears show demo %txt %s %n"><l>A stream containing all the positive rational numbers:</l><block var="rationals"/><l>15</l></custom-block><block s="doSetVar"><l>hanoi</l><custom-block s="interleave streams %mult%anyUE"><list><block var="ones"/><custom-block s="map %repRing over stream(s) %mult%l"><block s="reifyReporter"><autolambda><block s="reportVariadicSum"><list><l></l><l>1</l></list></block></autolambda><list></list></block><list><block var="hanoi"/></list></custom-block></list></custom-block></block><custom-block s="$gears show demo %txt %s %n"><l>A stream showing which disc to move next in an infinitely tall ”Towers of Hanoi” puzzle:</l><block var="hanoi"/><l>15</l></custom-block><block s="doSayFor"><l>Demo finished.</l><l>2</l></block></script></block-definition><block-definition s="sieve %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="300" collapsed="false">Call this block with STREAM WITH NUMBERS FROM 2&#xD;as its input to get the infinite stream of all the prime numbers.&#xD;&#xD;It&apos;s called SIEVE because the algorithm it uses is the Sieve of&#xD;Eratosthenes: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAM.</comment><header></header><code></code><translations>pt:a crivagem do canal _&#xD;</translations><inputs><input type="%l"></input></inputs><script><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="stream"/></custom-block><custom-block s="sieve %l"><custom-block s="keep items %predRing from stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicGreaterThan"><list><block s="reportModulus"><l></l><custom-block s="head of stream %l"><block var="stream"/></custom-block></block><l>0</l></list></block></autolambda><list></list></block><custom-block s="tail of stream %l"><block var="stream"/></custom-block></custom-block></custom-block></custom-block></block></script><scripts><script x="10" y="171.28571428571436"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="sieve %l"><custom-block s="stream with numbers from %n"><l>2</l></custom-block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="$gears show demo %&apos;description&apos; %&apos;demo&apos; %&apos;howmany&apos;" type="command" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%txt"></input><input type="%s"></input><input type="%n"></input></inputs><script><block s="doSayFor"><block var="description"/><l>2</l></block><block s="doSayFor"><l></l><l>0.5</l></block><block s="bubble"><custom-block s="show stream %l %n"><block var="demo"/><block var="howmany"/></custom-block></block><block s="doPauseAll"></block><block s="bubble"><l></l></block></script></block-definition><block-definition s="show stream %&apos;stream&apos; %&apos;requested&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="181.33333333333334" collapsed="false">As of v2 of the Streams library, this block is obsolete (kept as a hidden block for upward compatibility with v1).</comment><header></header><code></code><translations></translations><inputs><input type="%l"></input><input type="%n">10</input></inputs><script><block s="doReport"><custom-block s="list %n items of stream %l"><block var="requested"/><block var="stream"/></custom-block></block></script></block-definition><block-definition s="MORE stream blocks …" type="reporter" category="Streams"><comment w="62" collapsed="true">Edit me.</comment><header></header><code></code><translations></translations><inputs></inputs><script><custom-block s="$speechBubble %mlt %cs"><l>for upward compatibility with library v1!</l><script><custom-block s="· %anyUE"><custom-block s="map %repRing over stream %mult%l"><block s="reifyReporter"><script></script><list></list></block><list><l/></list></custom-block></custom-block><custom-block s="· %anyUE"><custom-block s="keep items such that %predRing from stream %l"><block s="reifyPredicate"><script></script><list></list></block><l/></custom-block></custom-block><custom-block s="· %anyUE"><custom-block s="show stream %l %n"><l/><l>10</l></custom-block></custom-block></script></custom-block><custom-block s="$speechBubble %mlt %cs"><l>create streams</l><script><custom-block s="· %anyUE"><custom-block s="stream with numbers from %n to %n step %n"><l>1</l><l>Infinity</l><l>1</l></custom-block></custom-block></script></custom-block><custom-block s="$speechBubble %mlt %cs"><l>higher order functions and UNIQUES</l><script><custom-block s="· %anyUE"><custom-block s="map %repRing over keep %predRing from map %repRing over stream %l"><block s="reifyReporter"><script></script><list></list></block><block s="reifyPredicate"><script></script><list></list></block><block s="reifyReporter"><script></script><list></list></block><l/></custom-block></custom-block><custom-block s="· %anyUE"><custom-block s="$crosshairs flatmap %repRing over stream %l"><block s="reifyReporter"><script></script><list></list></block><l/></custom-block></custom-block><custom-block s="· %anyUE"><custom-block s="flatmap finite %repRing over stream %l"><block s="reifyReporter"><script></script><list></list></block><l/></custom-block></custom-block><custom-block s="· %anyUE"><custom-block s="$flash uniques by %predRing latest 1st? %b of stream %l"><block s="reifyPredicate"><script></script><list></list></block><l/><l/></custom-block></custom-block><custom-block s="· %anyUE"><custom-block s="$flash integrate %repRing with precursor %s over stream %l"><block s="reifyReporter"><script></script><list></list></block><l></l><l/></custom-block></custom-block></script></custom-block><custom-block s="$speechBubble %mlt %cs"><l>mix streams</l><script><custom-block s="· %anyUE"><custom-block s="merge streams %mult%l %br ordered by %repRing uniques? %b by %predRing"><list><l/><l/></list><block s="reifyReporter"><script></script><list></list></block><l/><block s="reifyPredicate"><script></script><list></list></block></custom-block></custom-block><custom-block s="· %anyUE"><custom-block s="keep items from stream %l %br %s stream %l %br ordered by key %repRing"><l/><l>AND</l><l/><block s="reifyReporter"><script></script><list></list></block></custom-block></custom-block></script></custom-block><custom-block s="$speechBubble %mlt %cs"><l>selectors</l><script><custom-block s="· %anyUE"><custom-block s="list %n items with %upvar of stream %l"><l>10</l><l>downstream</l><l/></custom-block></custom-block><custom-block s="· %anyUE"><block s="reifyScript"><script><custom-block s="%upvar for each %upvar in stream %l %cs"><l>#</l><l>item</l><l/><script></script></custom-block></script><list></list></block></custom-block></script></custom-block><custom-block s="$speechBubble %mlt %cs"><l>demos</l><script><custom-block s="· %anyUE"><custom-block s="sorted stream from unsorted list %l"><l/></custom-block></custom-block><custom-block s="· %anyUE"><custom-block s="sieve %l"><l/></custom-block></custom-block></script></custom-block><block s="doReport"><l>Edit me!</l></block></script></block-definition><block-definition s="keep items such that %&apos;pred&apos; from stream %&apos;stream&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="239.42239583333335" collapsed="false">As of v2 of the Streams Library, this function as been superseded by KEEP ITEMS () FROM STREAM ().</comment><header></header><code></code><translations>pt:os itens tais que _ do canal _&#xD;</translations><inputs><input type="%predRing"></input><input type="%l"></input></inputs><script><block s="doReport"><custom-block s="keep items %predRing from stream %l"><block var="pred"/><block var="stream"/></custom-block></block></script><scripts><script x="10" y="95.66666666666663"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items such that %predRing from stream %l"><block s="reifyPredicate"><autolambda><block s="reportVariadicEquals"><list><block s="reportModulus"><l></l><l>2</l></block><l>0</l></list></block></autolambda><list></list></block><custom-block s="stream with numbers from %n"><l>1</l></custom-block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="$gears HELPER stream repeating %&apos;items&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations>pt:um canal com _&#xD;</translations><inputs><input type="%l">help</input></inputs><script><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block s="reportListItem"><l>1</l><block var="items"/></block><custom-block s="$gears HELPER stream repeating %l"><custom-block s="%l followed by %s"><block s="reportCDR"><block var="items"/></block><block s="reportListItem"><l>1</l><block var="items"/></block></custom-block></custom-block></custom-block></block></script></block-definition><block-definition s="%&apos;#&apos; for each %&apos;item&apos; in stream %&apos;stream&apos; %&apos;action&apos;" type="command" category="Streams" helper="true"><comment x="0" y="0" w="238" collapsed="false">The stream equivalant of FOR EACH (item) OF (list).&#xD;&#xD;CAUTION&#xD;If the embedded action uses a variable that is external to this block, the variable can not be changed inside the action.&#xD;&#xD;General info on streams: see the help text of TAIL OF STREAMS.</comment><header></header><code></code><translations></translations><inputs><input type="%upvar"></input><input type="%upvar"></input><input type="%l"></input><input type="%cs"></input></inputs><script><custom-block s="let %upvar $arrowLeft %s"><l>action*</l><custom-block s="substitute vars %s"><block var="action"/></custom-block></custom-block><block s="doSetVar"><l>#</l><l>1</l></block><block s="doUntil"><custom-block s="is stream %l empty?"><block var="stream"/></custom-block><script><block s="doSetVar"><l>item</l><custom-block s="head of stream %l"><block var="stream"/></custom-block></block><block s="doRun"><block s="reportAttributeOf"><block var="action*"/><block s="reportEnvironment"><l><option>script</option></l></block></block><list></list></block><block s="doChangeVar"><l>#</l><l>1</l></block><block s="doSetVar"><l>stream</l><custom-block s="tail of stream %l"><block var="stream"/></custom-block></block></script></block></script><scripts><script x="10" y="262.1666666666666"><custom-block s="%upvar for each %upvar in stream %l %cs"><l>#</l><l>item</l><custom-block s="stream %mult%s"><block s="reportNumbers"><l>11</l><l>20</l></block></custom-block><script><block s="doSayFor"><block s="reportNewList"><list><block var="#"/><block var="item"/></list></block><l>0.5</l></block></script></custom-block></script></scripts></block-definition><block-definition s="sorted stream from unsorted list %&apos;data&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="285.4601562500002" collapsed="false">A stream of sorted items (in ascending order) from an unsorted list. So item 1 of the stream is the list’s smallest item. If you are only looking for a few of a list’s smallest items, but don’t know how many in advance, this approach makes sense.&#xD;&#xD;For practical purposes, [SORTED] OF is usually faster, though. This is because the latter block’s JavaScript code was very much optimized for runtime efficiency - it ain’t fair, really.</comment><header></header><code></code><translations></translations><inputs><input type="%l"></input></inputs><script><block s="doIf"><block s="reportListIsEmpty"><block var="data"/></block><script><block s="doReport"><custom-block s="the empty stream"></custom-block></block></script><list></list></block><custom-block s="let %upvar $arrowLeft %s"><l>lowest</l><block s="reportVariadicMin"><block var="data"/></block></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>low index</l><block s="reportListIndex"><block var="lowest"/><block var="data"/></block></custom-block><custom-block s="let %upvar $arrowLeft %s"><l>length</l><block s="reportListAttribute"><l><option>length</option></l><block var="data"/></block></custom-block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><block var="lowest"/><custom-block s="sorted stream from unsorted list %l"><block s="reportListItem"><block s="reportVariadicSum"><list><block s="reportModulus"><block s="reportNumbers"><block var="low index"/><block s="reportDifference"><block s="reportVariadicSum"><list><block var="low index"/><block var="length"/></list></block><l>2</l></block></block><block var="length"/></block><l>1</l></list></block><block var="data"/></block></custom-block></custom-block></block></script><scripts><script x="10" y="355.74999999999994"><custom-block s="$speechBubble %mlt"><l>Demo: only the top-3 of lowest numbers from a large list is calculated</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>3</l><custom-block s="sorted stream from unsorted list %l"><block s="reportListAttribute"><l><option>shuffled</option></l><block s="reportNumbers"><l>1</l><l>123456</l></block></block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="$speechBubble %&apos;text&apos; %&apos;action&apos;" type="command" category="other"><header></header><code></code><translations></translations><inputs><input type="%mlt">no comment!</input><input type="%cs" initial="1"></input></inputs><script><block s="doRun"><block var="action"/><list></list></block></script></block-definition><block-definition s="$gears HELPER interleave streams %&apos;delayed streams&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%l" initial="2"></input></inputs><script><block s="doIf"><block s="reportListIsEmpty"><block s="reportCDR"><block var="delayed streams"/></block></block><script><block s="doReport"><block s="reportIfElse"><block s="reportListIsEmpty"><block var="delayed streams"/></block><custom-block s="the empty stream"></custom-block><block s="evaluate"><block s="reportListItem"><l>1</l><block var="delayed streams"/></block><list></list></block></block></block></script><list></list></block><block s="doIf"><custom-block s="is stream %l empty?"><custom-block s="%upvar $arrowLeft %s"><l>first</l><block s="evaluate"><block s="reportListItem"><l>1</l><block var="delayed streams"/></block><list></list></block></custom-block></custom-block><script><block s="doReport"><custom-block s="$gears HELPER interleave streams %l"><block s="reportCDR"><block var="delayed streams"/></block></custom-block></block></script><list></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="first"/></custom-block><custom-block s="$gears HELPER interleave streams %l"><custom-block s="%l followed by %s"><block s="reportCDR"><block var="delayed streams"/></block><custom-block s="delay %anyUE"><custom-block s="tail of stream %l"><block var="first"/></custom-block></custom-block></custom-block></custom-block></custom-block></block></script></block-definition><block-definition s="interleave streams %&apos;a&apos; %&apos;b&apos;" type="reporter" category="Streams" helper="true"><header></header><code></code><translations></translations><inputs><input type="%l" initial="1"></input><input type="%anyUE" initial="1"></input></inputs><script><block s="doIf"><custom-block s="is stream %l empty?"><block var="a"/></custom-block><script><block s="doReport"><block s="evaluate"><block var="b"/><list></list></block></block></script><list></list></block><block s="doReport"><custom-block s="%s in front of stream %anyUE"><custom-block s="head of stream %l"><block var="a"/></custom-block><custom-block s="interleave streams %l %anyUE"><block s="evaluate"><block var="b"/><list></list></block><custom-block s="tail of stream %l"><block var="a"/></custom-block></custom-block></custom-block></block></script></block-definition><block-definition s="keep items from stream %&apos;a&apos; $nl %&apos;logical operator&apos; stream %&apos;b&apos; $nl ordered by key %&apos;key function&apos;" type="reporter" category="Streams" helper="true"><comment x="0" y="0" w="227.85714285714286" collapsed="false">Merge two streams, keeping only items satisfying a logical condition with respect to the items of a second stream.&#xD;&#xD;INPUT&#xD;1. primary stream;&#xD;2. logical operator (AND, OR, XOR, NOT);&#xD;3. secondary stream;&#xD;4. key function, by which both streams are supposed to have been pre-sorted (ascending).&#xD;&#xD;WHAT IT DOES (with each logical operator)&#xD;AND: items from the primary stream that are also in the secondary stream will be kept (in case of multiple copies in either stream: the output stream will contain as many copies as the minimum number of copies of both input streams);&#xD;OR: items that are either in the primary or secondary stream, or both, will be kept. &#xD;In case of multiple copies of an item: like AND.&#xD;XOR: like OR, but items that are in both streams will be excluded.&#xD;NOT: items are kept that are in the primary stream and not in the secondary stream.</comment><header></header><code></code><translations></translations><inputs><input type="%l" initial="1"></input><input type="%s" readonly="true" initial="1">AND<options>AND&#xD;OR&#xD;XOR&#xD;but NOT</options></input><input type="%l" initial="1"></input><input type="%repRing" initial="1"></input></inputs><script><block s="doIf"><block s="reportVariadicEquals"><list><block var="logical operator"/><l>AND</l></list></block><script><block s="doReport"><custom-block s="keep items from stream %l %br AND stream %l %br ordered by key %repRing"><block var="a"/><block var="b"/><block var="key function"/></custom-block></block></script><list><block s="reportVariadicEquals"><list><block var="logical operator"/><l>OR</l></list></block><script><block s="doReport"><custom-block s="keep items from stream %l %br OR stream %l %br ordered by key %repRing"><block var="a"/><block var="b"/><block var="key function"/></custom-block></block></script><block s="reportVariadicEquals"><list><block var="logical operator"/><l>XOR</l></list></block><script><block s="doReport"><custom-block s="keep items from stream %l %br XOR stream %l %br ordered by key %repRing"><block var="a"/><block var="b"/><block var="key function"/></custom-block></block></script></list></block><block s="doReport"><custom-block s="keep items from stream %l %br but NOT stream %l %br ordered by key %repRing"><block var="a"/><block var="b"/><block var="key function"/></custom-block></block></script><scripts><script x="7.142857142857143" y="388.83333333333366"><custom-block s="$speechBubble %mlt"><l>Demo</l></custom-block><block s="doReport"><custom-block s="list %n items of stream %l"><l>10</l><custom-block s="keep items from stream %l %br %s stream %l %br ordered by key %repRing"><custom-block s="stream with numbers from %n"><l>1</l></custom-block><l>XOR</l><custom-block s="generate stream %repRing %upvar w/seeds: %mult%s"><block s="reifyReporter"><autolambda><block s="reportVariadicProduct"><list><block var="#"/><l>2.5</l></list></block></autolambda><list></list></block><l>#</l><list></list></custom-block><block s="reifyReporter"><script></script><list></list></block></custom-block></custom-block></block></script></scripts></block-definition><block-definition s="%&apos;value&apos; following %&apos;data&apos;" type="reporter" category="lists"><comment x="0" y="0" w="187.00000000000003" collapsed="false">The counterpart of IN FRONT OF: returns the first input attached at the back end of the list that is the second input</comment><header></header><code></code><translations></translations><inputs><input type="%s"></input><input type="%l"></input></inputs><script><block s="doReport"><block s="reportConcatenatedLists"><list><block var="data"/><block s="reportNewList"><list><block var="value"/></list></block></list></block></block></script></block-definition><block-definition s="square %&apos;number&apos;" type="reporter" category="operators"><header></header><code></code><translations></translations><inputs><input type="%n" initial="1"></input></inputs><script><block s="doReport"><block s="reportVariadicProduct"><list><block var="number"/><block var="number"/></list></block></block></script></block-definition><variables><variable name="THE EMPTY STREAM"><list struct="atomic" id="2">*the empty stream*</list></variable></variables></blocks>