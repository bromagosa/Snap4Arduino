<blocks app="Snap4Arduino 5.0
, http://snap4arduino.rocks" version="1"><block-definition s="$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 $nl $v1-0.7-0-0-0 set LED %&apos;color&apos; to %&apos;state&apos;" type="command" category="arduino"><header></header><code></code><translations>ca:$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 _ $v1-0.7-0-0-0 posa el LED _ a _&#xD;</translations><inputs><input type="%txt" readonly="true">ðŸ”´<options>ðŸ”´&#xD;ðŸ”µ</options></input><input type="%b">true</input></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="doDeclareVariables"><list><l>pin</l></list></block><block s="doSetVar"><l>pin</l><l>0</l></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>ðŸ”´</l></block><script><block s="doSetVar"><l>pin</l><l>12</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="color"/><l>ðŸ”µ</l></block><script><block s="doSetVar"><l>pin</l><l>13</l></block></script></block><block s="doIf"><block s="reportGreaterThan"><block var="pin"/><l>0</l></block><script><block s="digitalWrite"><block var="pin"/><block var="state"/></block></script></block></script></block></script></block-definition><block-definition s="$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 $nl $v1-0.7-0-0-0 set RGB LED to Red: %&apos;red&apos; Green: %&apos;green&apos; Blue: %&apos;blue&apos;" type="command" category="arduino"><header></header><code></code><translations>ca:$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 _ $v1-0.7-0-0-0 posa el LED RGB a Vermell: _ Verd: _ Blau: _&#xD;</translations><inputs><input type="%n">255</input><input type="%n">255</input><input type="%n">255</input></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="pwmWrite"><l>9</l><block var="red"/></block><block s="pwmWrite"><l>10</l><block var="green"/></block><block s="pwmWrite"><l>11</l><block var="blue"/></block></script></block></script></block-definition><block-definition s="$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 $nl $v1-0.7-0-0-0 play %&apos;freq&apos; Hz for %&apos;time&apos; seconds" type="command" category="arduino"><header></header><code></code><translations>ca:$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 _ $v1-0.7-0-0-0 toca _ Hz durant _ segons&#xD;</translations><inputs><input type="%n">440</input><input type="%n">0.5</input></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>freq</l><l>dur</l></list><l>if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[5].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_tone or SA5Firmata_ir firmware");&#xD;}&#xD;&#xD;var board = this.arduino.board;&#xD;if (pin === undefined || freq === undefined || pin &lt;= 1 || pin &gt; 255 || freq &lt; 0 || freq &gt; 65535) {&#xD;  throw new Error("Required var pin (2-255) and frequency (0-65535)");&#xD;}&#xD;var dur = dur || 0;&#xD;dur = dur &amp; 0xFFFF; //clamping value to 32 bits&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0xC7,  //Tone Command&#xD;      		(dur &gt;&gt; 25) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 18) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 11) &amp; 0x7F,&#xD;      		(dur &gt;&gt; 4) &amp; 0x7F,&#xD;      		((dur &lt;&lt; 3) &amp; parseInt("01111000",2)) | ((freq &gt;&gt; 13) &amp; parseInt("0111",2)),&#xD;      		(freq &gt;&gt; 6) &amp; 0x7F,&#xD;      		((freq &lt;&lt; 1) &amp; parseInt("01111110",2)) | ((pin &gt;&gt; 7) &amp; parseInt("01",2)),&#xD;        pin &amp; 0x7F,&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><l>5</l><block var="freq"/><block s="reportProduct"><block var="time"/><l>1000</l></block></list></block></script></block></script></block-definition><block-definition s="$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 $nl $v1-0.7-0-0-0 button %&apos;num&apos; ?" type="predicate" category="arduino"><header></header><code></code><translations>ca:$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 _ $v1-0.7-0-0-0 botÃ³ _ ?&#xD;</translations><inputs><input type="%txt" readonly="true">SW1<options>SW1&#xD;SW2</options></input></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="doDeclareVariables"><list><l>pin</l></list></block><block s="doSetVar"><l>pin</l><l>0</l></block><block s="doIf"><block s="reportEquals"><block var="num"/><l>SW1</l></block><script><block s="doSetVar"><l>pin</l><l>2</l></block></script></block><block s="doIf"><block s="reportEquals"><block var="num"/><l>SW2</l></block><script><block s="doSetVar"><l>pin</l><l>3</l></block></script></block><block s="doIf"><block s="reportGreaterThan"><block var="pin"/><l>0</l></block><script><block s="doReport"><block s="reportNot"><block s="reportDigitalReading"><block var="pin"/></block></block></block></script></block></script></block></script></block-definition><block-definition s="$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 $nl $v1-0.7-0-0-0 temperature (ÂºC)" type="reporter" category="arduino"><header></header><code></code><translations>ca:$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 _ $v1-0.7-0-0-0 temperatura (ÂºC)&#xD;</translations><inputs></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="doReport"><block s="reportQuotient"><block s="reportRound"><block s="reportQuotient"><block s="reportProduct"><l>5000</l><block s="reportAnalogReading"><l>2</l></block></block><l>1024</l></block></block><l>10</l></block></block></script></block></script></block-definition><block-definition s="$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 $nl $v1-0.7-0-0-0 light" type="reporter" category="arduino"><header></header><code></code><translations>ca:$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 _ $v1-0.7-0-0-0 llum&#xD;</translations><inputs></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="doReport"><block s="reportAnalogReading"><l>1</l></block></block></script></block></script></block-definition><block-definition s="$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 $nl $v1-0.7-0-0-0 control $turnRight" type="reporter" category="arduino"><header></header><code></code><translations></translations><inputs></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="doReport"><block s="reportRound"><block s="reportQuotient"><block s="reportAnalogReading"><l>0</l></block><l>10.24</l></block></block></block></script></block></script></block-definition><block-definition s="$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 $nl $v1-0.7-0-0-0 humidity" type="reporter" category="arduino"><header></header><code></code><translations>ca:$TdR-0.7-0-0-0 $S-0.6-255-0-0 $T-0.6-255-255-0 $E-0.6-0-255-0 $A-0.6-0-255-255 $M-0.6-0-0-255 _ $v1-0.7-0-0-0 humitat&#xD;</translations><inputs></inputs><script><block s="doIf"><block s="reportConnected"></block><script><block s="doRun"><block s="reportJSFunction"><list><l>pin</l><l>param</l></list><l>var board = this.arduino.board,&#xD;    sparam = 0;&#xD;if (param == "temperature") sparam = 1;&#xD;if (!this.arduino.isBoardReady()) {&#xD;    throw new Error("Arduino not connected");&#xD;}&#xD;if (this.arduino.board.pins[5].supportedModes.indexOf(0x05) === -1) {&#xD;    throw new Error("This block needs a device running SA5Firmata_tone or SA5Firmata_ir firmware");&#xD;}&#xD;if (!(typeof world.Arduino.firmata.SYSEX_RESPONSE === &apos;undefined&apos;) &amp;&amp; typeof world.Arduino.firmata.SYSEX_RESPONSE[0xCF] === &apos;undefined&apos;) {&#xD;    world.Arduino.firmata.SYSEX_RESPONSE[0xCF] = function(board) {&#xD;      	 var response = (board.currentBuffer[2] &amp; 0x7F) &lt;&lt; 1 | (board.currentBuffer[3] &amp; 0x01);&#xD;       	var rpin = board.currentBuffer[4] &gt;&gt; 1;&#xD;      	 var rparam = board.currentBuffer[4] &amp; parseInt("01",2);&#xD;      	 board.emit("DHT11-"+rpin+"-"+rparam, response);&#xD;    };&#xD;}&#xD;board["DHT11-"+pin+"-"+sparam] = null;&#xD;if (pin === undefined || pin &lt;= 1 || pin &gt; 63) {&#xD;  throw new Error("Required var pin (2-63)");&#xD;}&#xD;board.once("DHT11-"+pin+"-"+sparam, function(data){board["DHT11-"+pin+"-"+sparam] = data;});&#xD;var data =[0xF0, //START_SYSEX&#xD;      		0xCF,  //DHT11 Command&#xD;      		((pin &lt;&lt; 1) |  sparam) &amp; 0x7F,&#xD;      		0xF7  //END_SYSEX&#xD;];&#xD;board.transport.write(new Buffer(data));</l></block><list><l>4</l><l>humidity</l></list></block><block s="doWaitUntil"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l><l>param</l></list><l>var board = this.arduino.board,&#xD;    sparam = 0;&#xD;if (param == "temperature") sparam = 1;&#xD;board.checkArduinoBoardParam("DHT11-"+pin+"-"+sparam);&#xD;return (board["DHT11-"+pin+"-"+sparam] != null);</l></block><list><l>4</l><l>humidity</l></list></block></block><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>pin</l><l>param</l></list><l>var board = this.arduino.board,&#xD;    sparam = 0;&#xD;if (param == "temperature") sparam = 1;&#xD;board.getArduinoBoardParam("DHT11-"+pin+"-"+sparam);&#xD;if (board["DHT11-"+pin+"-"+sparam] == 255) {&#xD;    return;&#xD;} else {&#xD;return board["DHT11-"+pin+"-"+sparam];&#xD;}</l></block><list><l>4</l><l>humidity</l></list></block></block></script></block></script></block-definition></blocks>
